{"version":3,"file":"AddButtonNavigation-BUuDQXbT.js","sources":["../../node_modules/lucide-react/dist/esm/icons/arrow-right-left.js","../../node_modules/lucide-react/dist/esm/icons/arrow-right.js","../../node_modules/lucide-react/dist/esm/icons/building.js","../../node_modules/lucide-react/dist/esm/icons/refresh-cw.js","../../node_modules/lucide-react/dist/esm/icons/shield.js","../../node_modules/@radix-ui/react-switch/dist/index.mjs","../../src/components/ui/switch.tsx","../../src/services/assetService.ts","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/constants/adminDashboard.ts","../../src/components/AddPrinterModal.tsx","../../src/services/dataService.ts","../../src/PrinterDashboard/AssignModal.tsx","../../src/PrinterDashboard/components/AddButtonNavigation.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowRightLeft = createLucideIcon(\"ArrowRightLeft\", [\n  [\"path\", { d: \"m16 3 4 4-4 4\", key: \"1x1c3m\" }],\n  [\"path\", { d: \"M20 7H4\", key: \"zbl0bi\" }],\n  [\"path\", { d: \"m8 21-4-4 4-4\", key: \"h9nckh\" }],\n  [\"path\", { d: \"M4 17h16\", key: \"g4d7ey\" }]\n]);\n\nexport { ArrowRightLeft as default };\n//# sourceMappingURL=arrow-right-left.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowRight = createLucideIcon(\"ArrowRight\", [\n  [\"path\", { d: \"M5 12h14\", key: \"1ays0h\" }],\n  [\"path\", { d: \"m12 5 7 7-7 7\", key: \"xquz4c\" }]\n]);\n\nexport { ArrowRight as default };\n//# sourceMappingURL=arrow-right.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Building = createLucideIcon(\"Building\", [\n  [\"rect\", { width: \"16\", height: \"20\", x: \"4\", y: \"2\", rx: \"2\", ry: \"2\", key: \"76otgf\" }],\n  [\"path\", { d: \"M9 22v-4h6v4\", key: \"r93iot\" }],\n  [\"path\", { d: \"M8 6h.01\", key: \"1dz90k\" }],\n  [\"path\", { d: \"M16 6h.01\", key: \"1x0f13\" }],\n  [\"path\", { d: \"M12 6h.01\", key: \"1vi96p\" }],\n  [\"path\", { d: \"M12 10h.01\", key: \"1nrarc\" }],\n  [\"path\", { d: \"M12 14h.01\", key: \"1etili\" }],\n  [\"path\", { d: \"M16 10h.01\", key: \"1m94wz\" }],\n  [\"path\", { d: \"M16 14h.01\", key: \"1gbofw\" }],\n  [\"path\", { d: \"M8 10h.01\", key: \"19clt8\" }],\n  [\"path\", { d: \"M8 14h.01\", key: \"6423bh\" }]\n]);\n\nexport { Building as default };\n//# sourceMappingURL=building.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Shield = createLucideIcon(\"Shield\", [\n  [\n    \"path\",\n    {\n      d: \"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\",\n      key: \"oel41y\"\n    }\n  ]\n]);\n\nexport { Shield as default };\n//# sourceMappingURL=shield.js.map\n","\"use client\";\n\n// packages/react/switch/src/Switch.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = \"on\",\n      onCheckedChange,\n      form,\n      ...switchProps\n    } = props;\n    const [button, setButton] = React.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    const isFormControl = button ? form || !!button.closest(\"form\") : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange\n    });\n    return /* @__PURE__ */ jsxs(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [\n      /* @__PURE__ */ jsx(\n        Primitive.button,\n        {\n          type: \"button\",\n          role: \"switch\",\n          \"aria-checked\": checked,\n          \"aria-required\": required,\n          \"data-state\": getState(checked),\n          \"data-disabled\": disabled ? \"\" : void 0,\n          disabled,\n          value,\n          ...switchProps,\n          ref: composedRefs,\n          onClick: composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })\n        }\n      ),\n      isFormControl && /* @__PURE__ */ jsx(\n        BubbleInput,\n        {\n          control: button,\n          bubbles: !hasConsumerStoppedPropagationRef.current,\n          name,\n          value,\n          checked,\n          required,\n          disabled,\n          form,\n          style: { transform: \"translateX(-100%)\" }\n        }\n      )\n    ] });\n  }\n);\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return /* @__PURE__ */ jsx(\n      Primitive.span,\n      {\n        \"data-state\": getState(context.checked),\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        ...thumbProps,\n        ref: forwardedRef\n      }\n    );\n  }\n);\nSwitchThumb.displayName = THUMB_NAME;\nvar BubbleInput = (props) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */ jsx(\n    \"input\",\n    {\n      type: \"checkbox\",\n      \"aria-hidden\": true,\n      defaultChecked: checked,\n      ...inputProps,\n      tabIndex: -1,\n      ref,\n      style: {\n        ...props.style,\n        ...controlSize,\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        opacity: 0,\n        margin: 0\n      }\n    }\n  );\n};\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Switch;\nvar Thumb = SwitchThumb;\nexport {\n  Root,\n  Switch,\n  SwitchThumb,\n  Thumb,\n  createSwitchScope\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from \"react\"\r\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Switch = React.forwardRef<\r\n  React.ElementRef<typeof SwitchPrimitives.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SwitchPrimitives.Root\r\n    className={cn(\r\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 bg-gray-300\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  >\r\n    <SwitchPrimitives.Thumb\r\n      className={cn(\r\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\r\n      )}\r\n    />\r\n  </SwitchPrimitives.Root>\r\n))\r\nSwitch.displayName = SwitchPrimitives.Root.displayName\r\n\r\nexport { Switch }\r\n","import { supabase } from '@/integrations/supabase/client';\r\nimport { Printer, PrinterAssignment as BasePrinterAssignment, Client } from '@/types/database';\r\n\r\nexport interface CreateAssignmentData {\r\n  printer_id: string;\r\n  client_id: string;\r\n  serial_number: string;\r\n  department: string;\r\n  deployment_date: string;\r\n  usage_type: 'rental' | 'service_unit' | 'client_owned';\r\n  monthly_price?: number;\r\n  has_security_deposit: boolean;\r\n  security_deposit_amount?: number;\r\n  notes?: string;\r\n}\r\n\r\nexport interface UpdateAssignmentData {\r\n  serial_number?: string;\r\n  department?: string;\r\n  deployment_date?: string;\r\n  usage_type?: 'rental' | 'service_unit' | 'client_owned';\r\n  monthly_price?: number;\r\n  has_security_deposit?: boolean;\r\n  security_deposit_amount?: number;\r\n  notes?: string;\r\n  status?: 'active' | 'inactive' | 'returned' | 'undeployed';\r\n  department_location_id?: string; // <-- Added for transfer\r\n}\r\n\r\nexport interface PrinterAssignment extends BasePrinterAssignment {\r\n  printer?: Printer;\r\n  client?: Client;\r\n}\r\n\r\nexport interface MaintenanceSchedule {\r\n  id: string;\r\n  printer_id: string;\r\n  maintenance_type: string;\r\n  scheduled_date: string;\r\n  description?: string;\r\n  status: 'pending' | 'completed' | 'overdue';\r\n  completed_date?: string;\r\n  performed_by?: string;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface MaintenanceHistory {\r\n  id: string;\r\n  printer_id: string;\r\n  assignment_id?: string;\r\n  maintenance_type: string;\r\n  action_description: string;\r\n  parts_replaced?: string[];\r\n  notes?: string;\r\n  status_before?: string;\r\n  status_after?: string;\r\n  performed_by?: string;\r\n  performed_at: string;\r\n  issue_reported_date?: string;\r\n  completed_date?: string;\r\n  cost?: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface PrinterHistory {\r\n  id: string;\r\n  printer_id: string;\r\n  action_type: 'assigned' | 'transferred' | 'repair' | 'maintenance' | 'returned';\r\n  description: string;\r\n  performed_by?: string;\r\n  timestamp: string;\r\n  related_assignment_id?: string;\r\n}\r\n\r\nexport interface PrinterDocument {\r\n  id: string;\r\n  printer_id: string;\r\n  document_type: 'contract' | 'accountability' | 'manual' | 'warranty' | 'other';\r\n  title: string;\r\n  file_path?: string;\r\n  file_url?: string;\r\n  file_size?: number;\r\n  mime_type?: string;\r\n  uploaded_by?: string;\r\n  uploaded_at: string;\r\n}\r\n\r\nexport const assetService = {\r\n  async getPrinters(): Promise<Printer[]> {\r\n    const { data, error } = await supabase\r\n      .from('printers')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async createPrinter(printer: Omit<Printer, 'id' | 'created_at' | 'updated_at'>): Promise<Printer> {\r\n    const { data, error } = await supabase\r\n      .from('printers')\r\n      .insert(printer)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async updatePrinter(id: string, updates: Partial<Printer>): Promise<Printer> {\r\n    const { data, error } = await supabase\r\n      .from('printers')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async deletePrinter(id: string): Promise<void> {\r\n    const { error } = await supabase\r\n      .from('printers')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) throw error;\r\n  },\r\n\r\n  async createAssignment(data: CreateAssignmentData): Promise<PrinterAssignment> {\r\n    const { data: assignment, error } = await supabase\r\n      .from('printer_assignments')\r\n      .insert({\r\n        printer_id: data.printer_id,\r\n        client_id: data.client_id,\r\n        serial_number: data.serial_number,\r\n        department: data.department,\r\n        department_location_id: null,\r\n        deployment_date: data.deployment_date,\r\n        usage_type: data.usage_type,\r\n        monthly_price: data.monthly_price,\r\n        has_security_deposit: data.has_security_deposit,\r\n        security_deposit_amount: data.security_deposit_amount,\r\n        notes: data.notes,\r\n        status: 'available'\r\n      })\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return assignment as unknown as PrinterAssignment;\r\n  },\r\n\r\n  async updateAssignment(id: string, data: UpdateAssignmentData): Promise<PrinterAssignment> {\r\n    const { data: assignment, error } = await supabase\r\n      .from('printer_assignments')\r\n      .update(data)\r\n      .eq('id', id)\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return assignment as unknown as PrinterAssignment;\r\n  },\r\n\r\n  async deleteAssignment(id: string): Promise<void> {\r\n    try {\r\n      console.log(`Attempting to delete assignment: ${id}`);\r\n      \r\n      // Step 1: Check if assignment exists\r\n      const { data: assignment, error: checkError } = await supabase\r\n        .from('printer_assignments')\r\n        .select('id')\r\n        .eq('id', id)\r\n        .single();\r\n        \r\n      if (checkError || !assignment) {\r\n        throw new Error('Assignment not found');\r\n      }\r\n      \r\n      // Step 2: Disable the trigger that's causing the issue\r\n      console.log('Disabling triggers to prevent foreign key constraint violations...');\r\n      const { error: disableError } = await supabase.rpc('disable_printer_assignment_history_trigger');\r\n      if (disableError) {\r\n        console.warn('Could not disable trigger, proceeding anyway:', disableError);\r\n      }\r\n      \r\n      // Step 3: Delete all references to this assignment\r\n      console.log('Deleting all references to assignment...');\r\n      \r\n      const { error: historyError } = await supabase\r\n        .from('printer_assignment_history')\r\n        .delete()\r\n        .eq('printer_assignment_id', id);\r\n      \r\n      if (historyError) {\r\n        console.warn('Could not delete history records:', historyError);\r\n      }\r\n      \r\n      const { error: maintenanceError } = await supabase\r\n        .from('maintenance_history')\r\n        .delete()\r\n        .eq('assignment_id', id);\r\n      \r\n      if (maintenanceError) {\r\n        console.warn('Could not delete maintenance records:', maintenanceError);\r\n      }\r\n      \r\n      const { error: statusError } = await supabase\r\n        .from('printer_status')\r\n        .delete()\r\n        .eq('assignment_id', id);\r\n      \r\n      if (statusError) {\r\n        console.warn('Could not delete status records:', statusError);\r\n      }\r\n      \r\n      const { error: usageError } = await supabase\r\n        .from('usage_logs')\r\n        .delete()\r\n        .eq('assignment_id', id);\r\n      \r\n      if (usageError) {\r\n        console.warn('Could not delete usage records:', usageError);\r\n      }\r\n      \r\n      // Step 4: Now delete the assignment itself\r\n      console.log('Deleting assignment...');\r\n      const { error: deleteError } = await supabase\r\n        .from('printer_assignments')\r\n        .delete()\r\n        .eq('id', id);\r\n          \r\n      if (deleteError) {\r\n        console.error('Final delete failed:', deleteError);\r\n        throw new Error(`Failed to delete assignment: ${deleteError.message}`);\r\n      }\r\n      \r\n      // Step 5: Re-enable the trigger\r\n      console.log('Re-enabling triggers...');\r\n      const { error: enableError } = await supabase.rpc('enable_printer_assignment_history_trigger');\r\n      if (enableError) {\r\n        console.warn('Could not re-enable trigger:', enableError);\r\n      }\r\n      \r\n      console.log('Assignment deletion completed successfully');\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error in deleteAssignment:', error);\r\n      // Re-enable trigger even if deletion fails\r\n      try {\r\n        console.log('Re-enabling triggers after error...');\r\n        await supabase.rpc('enable_printer_assignment_history_trigger');\r\n      } catch (triggerError) {\r\n        console.error('Failed to re-enable trigger:', triggerError);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAllAssignments(): Promise<PrinterAssignment[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []) as unknown as PrinterAssignment[];\r\n  },\r\n\r\n  async getAssignmentById(id: string): Promise<PrinterAssignment> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data as unknown as PrinterAssignment;\r\n  },\r\n\r\n  async getAssignmentsByClient(clientId: string): Promise<PrinterAssignment[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .eq('client_id', clientId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []) as unknown as PrinterAssignment[];\r\n  },\r\n\r\n  async getClientInactiveAssignments(clientId: string): Promise<PrinterAssignment[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        departments_location(\r\n          id,\r\n          name,\r\n          department:departments(id, name)\r\n        )\r\n      `)\r\n      .eq('client_id', clientId)\r\n      .eq('status', 'inactive');\r\n    if (error) throw error;\r\n    // Cast status to the expected union type\r\n    return (data || []).map((assignment: any) => ({\r\n      ...assignment,\r\n      status: assignment.status as 'active' | 'inactive' | 'returned' | 'undeployed',\r\n    })) as PrinterAssignment[];\r\n  },\r\n\r\n  async getClientPrinterPool(clientId: string): Promise<PrinterAssignment[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .eq('client_id', clientId)\r\n      .eq('status', 'undeployed')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []) as unknown as PrinterAssignment[];\r\n  },\r\n\r\n  async deployPrinterFromPool(assignmentId: string, departmentLocationId: string): Promise<PrinterAssignment> {\r\n    const { data: assignment, error } = await supabase\r\n      .from('printer_assignments')\r\n      .update({\r\n        department_location_id: departmentLocationId,\r\n        status: 'active',\r\n        deployment_date: new Date().toISOString().split('T')[0]\r\n      })\r\n      .eq('id', assignmentId)\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return assignment as unknown as PrinterAssignment;\r\n  },\r\n\r\n  async getAvailablePrinters(): Promise<Printer[]> {\r\n    const { data, error } = await supabase\r\n      .from('printers')\r\n      .select('*')\r\n      .eq('is_available', true)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async searchAssignments(query: string): Promise<PrinterAssignment[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        *,\r\n        printer:printers(*),\r\n        client:clients(*)\r\n      `)\r\n      .or(`serial_number.ilike.%${query}%,notes.ilike.%${query}%`)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []) as unknown as PrinterAssignment[];\r\n  },\r\n\r\n  async getMaintenanceSchedule(printerId: string): Promise<MaintenanceSchedule[]> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_schedules')\r\n      .select('*')\r\n      .eq('printer_id', printerId)\r\n      .order('scheduled_date', { ascending: true });\r\n\r\n    if (error) throw error;\r\n    return (data || []).map(schedule => ({\r\n      ...schedule,\r\n      status: schedule.status as 'pending' | 'completed' | 'overdue'\r\n    } as MaintenanceSchedule));\r\n  },\r\n\r\n  async createMaintenanceSchedule(schedule: Omit<MaintenanceSchedule, 'id' | 'created_at' | 'updated_at'>): Promise<MaintenanceSchedule> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_schedules')\r\n      .insert(schedule)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return {\r\n      ...data,\r\n      status: data.status as 'pending' | 'completed' | 'overdue'\r\n    } as MaintenanceSchedule;\r\n  },\r\n\r\n  async updateMaintenanceSchedule(id: string, updates: Partial<MaintenanceSchedule>): Promise<MaintenanceSchedule> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_schedules')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return {\r\n      ...data,\r\n      status: data.status as 'pending' | 'completed' | 'overdue'\r\n    } as MaintenanceSchedule;\r\n  },\r\n\r\n  async getMaintenanceHistory(printerId: string): Promise<MaintenanceHistory[]> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_history')\r\n      .select('*')\r\n      .eq('printer_id', printerId)\r\n      .order('performed_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async addMaintenanceHistoryEntry(entry: Omit<MaintenanceHistory, 'id' | 'created_at' | 'updated_at'>): Promise<MaintenanceHistory> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_history')\r\n      .insert(entry)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async updateMaintenanceHistoryEntry(id: string, updates: Partial<MaintenanceHistory>): Promise<MaintenanceHistory> {\r\n    const { data, error } = await supabase\r\n      .from('maintenance_history')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async getPrinterHistory(printerId: string): Promise<PrinterHistory[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_history')\r\n      .select('*')\r\n      .eq('printer_id', printerId)\r\n      .order('timestamp', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []).map(history => ({\r\n      ...history,\r\n      action_type: history.action_type as 'assigned' | 'transferred' | 'repair' | 'maintenance' | 'returned'\r\n    } as PrinterHistory));\r\n  },\r\n\r\n  async addPrinterHistoryEntry(entry: Omit<PrinterHistory, 'id'>): Promise<PrinterHistory> {\r\n    const { data, error } = await supabase\r\n      .from('printer_history')\r\n      .insert(entry)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return {\r\n      ...data,\r\n      action_type: data.action_type as 'assigned' | 'transferred' | 'repair' | 'maintenance' | 'returned'\r\n    } as PrinterHistory;\r\n  },\r\n\r\n  async getPrinterDocuments(printerId: string): Promise<PrinterDocument[]> {\r\n    const { data, error } = await supabase\r\n      .from('printer_documents')\r\n      .select('*')\r\n      .eq('printer_id', printerId)\r\n      .order('uploaded_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return (data || []).map(document => ({\r\n      ...document,\r\n      document_type: document.document_type as 'contract' | 'accountability' | 'manual' | 'warranty' | 'other'\r\n    } as PrinterDocument));\r\n  },\r\n\r\n  async uploadPrinterDocument(document: Omit<PrinterDocument, 'id' | 'uploaded_at'>): Promise<PrinterDocument> {\r\n    const { data, error } = await supabase\r\n      .from('printer_documents')\r\n      .insert(document)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return {\r\n      ...data,\r\n      document_type: data.document_type as 'contract' | 'accountability' | 'manual' | 'warranty' | 'other'\r\n    } as PrinterDocument;\r\n  },\r\n\r\n  async deletePrinterDocument(id: string): Promise<void> {\r\n    const { error } = await supabase\r\n      .from('printer_documents')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) throw error;\r\n  },\r\n\r\n  async makePrinterAvailable(assignmentId: string): Promise<void> {\r\n    const { error } = await supabase\r\n      .from('printer_assignments')\r\n      .update({\r\n        status: 'available',\r\n        client_id: null,\r\n        department_location_id: null,\r\n        // Optionally clear other assignment-specific fields\r\n      })\r\n      .eq('id', assignmentId);\r\n    if (error) throw error;\r\n  },\r\n\r\n  async deleteDepartment(id: string): Promise<void> {\r\n    const { error } = await supabase\r\n      .from('departments')\r\n      .delete()\r\n      .eq('id', id);\r\n    if (error) throw error;\r\n  },\r\n};\r\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","export const ADMIN_DASHBOARD_TABS = {\r\n  CLIENT: 'client',\r\n  SUPPLIERS: 'suppliers',\r\n  PRINTERS: 'printers',\r\n  PRODUCT: 'product',\r\n} as const;\r\n\r\nexport const SEARCH_PLACEHOLDERS = {\r\n  CLIENT: 'Search clients...',\r\n  SUPPLIERS: 'Search suppliers...',\r\n  PRINTERS_ALL: 'Search printers...',\r\n  PRODUCT: 'Search products...',\r\n} as const;\r\n\r\nexport const LOADING_MESSAGES = {\r\n  ADMIN_DASHBOARD: 'Loading admin dashboard...',\r\n  CLIENT: 'Loading clients...',\r\n  SUPPLIERS: 'Loading suppliers...',\r\n  PRINTERS: 'Loading printers...',\r\n  PRODUCT: 'Loading products...',\r\n  CLIENT_DETAILS: 'Loading client details...',\r\n} as const;\r\n\r\nexport const ERROR_MESSAGES = {\r\n  CLIENT_NOT_FOUND: 'Client not found or you do not have permission to view it.',\r\n  GENERIC_ERROR: 'An error occurred. Please try again.',\r\n} as const;\r\n\r\nexport const SUCCESS_MESSAGES = {\r\n  CLIENT_ADDED: 'Client added successfully!',\r\n  CLIENT_UPDATED: 'Client updated successfully!',\r\n  CLIENT_DELETED: 'Client deleted successfully!',\r\n} as const;\r\n\r\nexport const UI_CONSTANTS = {\r\n  SKELETON_ITEMS: 5,\r\n  MAX_DISPLAY_ITEMS: 100,\r\n} as const;","import React, { useState, useEffect } from 'react';\r\nimport { X, Plus, Save, Check, Upload } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { printerService } from '@/services/printerService';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { Printer } from '@/types/database';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface AddPrinterModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onPrinterAdded: () => void;\r\n}\r\n\r\nconst AddPrinterModal: React.FC<AddPrinterModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onPrinterAdded,\r\n}) => {\r\n  const { toast } = useToast();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [colorType, setColorType] = useState<'colored' | 'monochrome' | null>(null);\r\n  const [imageFile, setImageFile] = useState<File | null>(null);\r\n  const [imagePreview, setImagePreview] = useState<string>('');\r\n  const [errorMsg, setErrorMsg] = useState<string | null>(null);\r\n  const [showCustomManufacturer, setShowCustomManufacturer] = useState(false);\r\n  const [customManufacturer, setCustomManufacturer] = useState('');\r\n  const [showCustomSeries, setShowCustomSeries] = useState(false);\r\n  const [customSeries, setCustomSeries] = useState('');\r\n  const [seriesOptions, setSeriesOptions] = useState<string[]>([]);\r\n\r\n  // Predefined manufacturer options\r\n  const manufacturerOptions = [\r\n    'HP', 'Brother', 'Samsung', 'Canon', 'Epson', 'Xerox', 'Lexmark', 'Dell', 'Ricoh', 'Kyocera'\r\n  ];\r\n\r\n  // Printer types\r\n  const printerTypes = [\r\n    'Print Only',\r\n    'Multifunction',\r\n    'Scanner Only',\r\n    'Copy Only'\r\n  ];\r\n\r\n  // Technology types\r\n  const technologyTypes = [\r\n    'laser',\r\n    'inkjet',\r\n    'dot-matrix',\r\n    'thermal'\r\n  ];\r\n\r\n  // Common paper sizes\r\n  const paperSizes = ['A4', 'A3', 'A5', 'Letter', 'Legal', 'Executive', 'Folio'];\r\n  \r\n  const [formData, setFormData] = useState({\r\n    manufacturer: '',\r\n    model: '',\r\n    series: '',\r\n    color: '',\r\n    printer_type: 'Print Only', // Default to \"Print Only\"\r\n    technology_type: 'laser', // Default to \"laser\"\r\n    image_url: '',\r\n    is_available: true,\r\n    supported_paper_sizes: 'A4, Letter, Legal, Folio', // Default paper sizes\r\n    connectivity_usb: true, // Default USB enabled\r\n    connectivity_wifi: false,\r\n    connectivity_wifi_direct: false,\r\n    connectivity_ethernet: false,\r\n  });\r\n\r\n  // Generate printer name automatically\r\n  const generatePrinterName = () => {\r\n    const parts = [];\r\n    if (formData.manufacturer) parts.push(formData.manufacturer);\r\n    if (formData.series) parts.push(formData.series);\r\n    if (formData.model) parts.push(formData.model);\r\n    return parts.join(' ') || 'New Printer';\r\n  };\r\n\r\n  const printerName = generatePrinterName();\r\n\r\n  // Parse selected paper sizes from string to array\r\n  const selectedPaperSizes = formData.supported_paper_sizes \r\n    ? formData.supported_paper_sizes.split(',').map(size => size.trim()).filter(size => size)\r\n    : [];\r\n\r\n  // Check if series contains DCP or MFC (multifunction indicators)\r\n  const isMultifunction = (series: string) => {\r\n    return /\\b(DCP|MFC)\\b/i.test(series);\r\n  };\r\n\r\n  // Update printer type and technology based on series\r\n  useEffect(() => {\r\n    if (formData.series) {\r\n      if (isMultifunction(formData.series)) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          printer_type: 'Multifunction',\r\n          technology_type: 'multifunction'\r\n        }));\r\n      } else {\r\n        // Reset to defaults if not multifunction\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          printer_type: 'Print Only',\r\n          technology_type: 'laser'\r\n        }));\r\n      }\r\n    }\r\n  }, [formData.series]);\r\n\r\n  // Handle paper size checkbox changes\r\n  const handlePaperSizeChange = (paperSize: string, checked: boolean) => {\r\n    let updatedSizes = [...selectedPaperSizes];\r\n    \r\n    if (checked) {\r\n      if (!updatedSizes.includes(paperSize)) {\r\n        updatedSizes.push(paperSize);\r\n      }\r\n    } else {\r\n      updatedSizes = updatedSizes.filter(size => size !== paperSize);\r\n    }\r\n    \r\n    const sizesString = updatedSizes.join(', ');\r\n    handleInputChange('supported_paper_sizes', sizesString);\r\n  };\r\n\r\n  // Fetch existing series options when modal opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      fetchSeriesOptions();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const fetchSeriesOptions = async (manufacturer?: string) => {\r\n    try {\r\n      const series = await printerService.getUniqueSeries(manufacturer);\r\n      setSeriesOptions(series.filter(s => s && s.trim() !== ''));\r\n    } catch (error) {\r\n      console.error('Error fetching series options:', error);\r\n      setSeriesOptions([]);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleManufacturerChange = (value: string) => {\r\n    if (value === 'custom') {\r\n      setShowCustomManufacturer(true);\r\n      setCustomManufacturer('');\r\n      handleInputChange('manufacturer', '');\r\n      setSeriesOptions([]);\r\n      handleInputChange('series', '');\r\n    } else {\r\n      setShowCustomManufacturer(false);\r\n      setCustomManufacturer('');\r\n      handleInputChange('manufacturer', value);\r\n      fetchSeriesOptions(value);\r\n      handleInputChange('series', '');\r\n    }\r\n  };\r\n\r\n  const handleCustomManufacturerChange = (value: string) => {\r\n    setCustomManufacturer(value);\r\n    handleInputChange('manufacturer', value);\r\n    \r\n    if (value && value.trim() !== '') {\r\n      fetchSeriesOptions(value.trim());\r\n    } else {\r\n      setSeriesOptions([]);\r\n    }\r\n    \r\n    handleInputChange('series', '');\r\n  };\r\n\r\n  const handleSeriesChange = (value: string) => {\r\n    if (value === 'custom') {\r\n      setShowCustomSeries(true);\r\n      setCustomSeries('');\r\n      handleInputChange('series', '');\r\n    } else {\r\n      setShowCustomSeries(false);\r\n      setCustomSeries('');\r\n      handleInputChange('series', value);\r\n    }\r\n  };\r\n\r\n  const handleCustomSeriesChange = (value: string) => {\r\n    setCustomSeries(value);\r\n    handleInputChange('series', value);\r\n  };\r\n\r\n  const handleColorTypeChange = (type: 'colored' | 'monochrome') => {\r\n    setColorType(type);\r\n    if (type === 'colored') {\r\n      handleInputChange('color', 'CYMK');\r\n    } else if (type === 'monochrome') {\r\n      handleInputChange('color', 'Monochrome');\r\n    }\r\n  };\r\n\r\n  // FIXED: Handle image selection for preview only (no upload yet)\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      // Validate file type\r\n      if (!file.type.startsWith('image/')) {\r\n        toast({\r\n          title: 'Invalid File',\r\n          description: 'Please select an image file (PNG, JPG, JPEG, GIF)',\r\n          variant: 'destructive'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validate file size\r\n      if (file.size > 5 * 1024 * 1024) {\r\n        toast({\r\n          title: 'File Too Large',\r\n          description: 'Please select an image smaller than 5MB',\r\n          variant: 'destructive'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Store file for later upload and create preview\r\n      setImageFile(file);\r\n      setErrorMsg(null);\r\n      \r\n      // Create temporary preview URL\r\n      const previewUrl = URL.createObjectURL(file);\r\n      setImagePreview(previewUrl);\r\n      \r\n      // Clear any existing image URL since we're using a file now\r\n      handleInputChange('image_url', '');\r\n    }\r\n  };\r\n\r\n  // FIXED: Upload image to Supabase storage (only called during form submission)\r\n  const uploadImageToStorage = async (file: File): Promise<string | null> => {\r\n    try {\r\n      const fileExt = file.name.split('.').pop();\r\n      const fileName = `${uuidv4()}.${fileExt}`;\r\n      \r\n      const { data, error } = await supabase.storage\r\n        .from('printer-images')\r\n        .upload(fileName, file, {\r\n          cacheControl: '3600',\r\n          upsert: false,\r\n          contentType: file.type,\r\n        });\r\n        \r\n      if (error) {\r\n        throw new Error(`Image upload failed: ${error.message}`);\r\n      }\r\n      \r\n      const { data: urlData } = supabase.storage\r\n        .from('printer-images')\r\n        .getPublicUrl(fileName);\r\n        \r\n      return urlData?.publicUrl || null;\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleRemoveImage = () => {\r\n    // Clean up preview URL to prevent memory leaks\r\n    if (imagePreview && imagePreview.startsWith('blob:')) {\r\n      URL.revokeObjectURL(imagePreview);\r\n    }\r\n    \r\n    setImageFile(null);\r\n    setImagePreview('');\r\n    handleInputChange('image_url', '');\r\n    setErrorMsg(null);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.manufacturer?.trim()) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please select a manufacturer',\r\n        variant: 'destructive'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!formData.model?.trim()) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please enter a model',\r\n        variant: 'destructive'\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setErrorMsg(null);\r\n    \r\n    try {\r\n      let finalImageUrl = formData.image_url;\r\n\r\n      // FIXED: Upload image only when form is being submitted\r\n      if (imageFile) {\r\n        try {\r\n          finalImageUrl = await uploadImageToStorage(imageFile);\r\n          \r\n          if (finalImageUrl) {\r\n            toast({\r\n              title: 'Image Uploaded',\r\n              description: 'Image uploaded successfully',\r\n            });\r\n          }\r\n        } catch (uploadError: any) {\r\n          // Handle image upload error\r\n          setErrorMsg(`Image upload failed: ${uploadError.message}`);\r\n          toast({\r\n            title: 'Upload Failed',\r\n            description: uploadError.message || 'Failed to upload image',\r\n            variant: 'destructive'\r\n          });\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Create printer data with uploaded image URL\r\n      const printerData: Omit<Printer, 'id' | 'created_at' | 'updated_at'> = {\r\n        name: printerName,\r\n        manufacturer: formData.manufacturer || null,\r\n        model: formData.model || null,\r\n        series: formData.series || null,\r\n        color: formData.color || null,\r\n        printer_type: formData.printer_type || null,\r\n        description: null,\r\n        image_url: finalImageUrl || null,\r\n        rental_status: null,\r\n        rental_price_per_month: null,\r\n        rental_start_date: null,\r\n        rental_end_date: null,\r\n        rental_eligible: false, // Fixed: Added the missing value\r\n        rental_price_type: null,\r\n        rental_price_per_print: null,\r\n        purchase_price: null,\r\n        status: 'active',\r\n        is_available: formData.is_available,\r\n        aliases: null,\r\n        location_count: null,\r\n        automatic_duplex: null,\r\n        connectivity_usb: formData.connectivity_usb,\r\n        connectivity_wifi: formData.connectivity_wifi,\r\n        connectivity_wifi_direct: formData.connectivity_wifi_direct,\r\n        connectivity_ethernet: formData.connectivity_ethernet,\r\n        connectivity_bluetooth: false,\r\n        connectivity_nfc: false,\r\n        cloud_printing_support: null,\r\n        driver_download_url: null,\r\n        software_download_url: null,\r\n        user_manual_url: null,\r\n        supported_os: null,\r\n        print_resolution: null,\r\n        print_speed_bw: null,\r\n        print_speed_color: null,\r\n        first_page_out_time: null,\r\n        input_tray_capacity: null,\r\n        output_tray_capacity: null,\r\n        supported_paper_sizes: formData.supported_paper_sizes || null,\r\n        supported_paper_types: null,\r\n      };\r\n\r\n      const createdPrinter = await printerService.createPrinter(printerData);\r\n\r\n      // Automatically add to inventory as service unit\r\n      await printerService.createPrinterAssignment({\r\n        printer_id: createdPrinter.id,\r\n        client_id: null,\r\n        serial_number: null,\r\n        usage_type: 'service_unit',\r\n        status: 'available',\r\n        deployment_date: null,\r\n        department_location_id: null,\r\n        is_client_owned: false,\r\n      });\r\n      \r\n      toast({\r\n        title: 'Success',\r\n        description: 'Printer added to catalog and inventory successfully'\r\n      });\r\n      \r\n      onPrinterAdded();\r\n      onClose();\r\n      \r\n      // Clean up and reset form\r\n      if (imagePreview && imagePreview.startsWith('blob:')) {\r\n        URL.revokeObjectURL(imagePreview);\r\n      }\r\n      \r\n      setFormData({\r\n        manufacturer: '',\r\n        model: '',\r\n        series: '',\r\n        color: '',\r\n        printer_type: 'Print Only', // Reset to default\r\n        technology_type: 'laser', // Reset to default\r\n        image_url: '',\r\n        is_available: true,\r\n        supported_paper_sizes: 'A4, Letter, Legal, Folio', // Reset to defaults\r\n        connectivity_usb: true, // Reset to default (enabled)\r\n        connectivity_wifi: false,\r\n        connectivity_wifi_direct: false,\r\n        connectivity_ethernet: false,\r\n      });\r\n      \r\n      setShowCustomManufacturer(false);\r\n      setCustomManufacturer('');\r\n      setShowCustomSeries(false);\r\n      setCustomSeries('');\r\n      setColorType(null);\r\n      setImageFile(null);\r\n      setImagePreview('');\r\n      setErrorMsg(null);\r\n    \r\n    } catch (error: any) {\r\n      console.error('Error adding printer:', error);\r\n      \r\n      let errorMessage = 'Failed to add printer. Please try again.';\r\n      let errorTitle = 'Error';\r\n      \r\n      if (error.code === '23505' || \r\n          error.message?.toLowerCase().includes('duplicate key') ||\r\n          error.message?.toLowerCase().includes('unique constraint') ||\r\n          error.message?.toLowerCase().includes('already exists')) {\r\n        \r\n        errorTitle = 'Duplicate Printer';\r\n        const errorText = (error.message || '').toLowerCase();\r\n        \r\n        if (errorText.includes('unique_printer_name') || \r\n            (errorText.includes('name') && errorText.includes('duplicate'))) {\r\n          errorMessage = `A printer named \"${printerName}\" already exists. Please choose different values.`;\r\n        } else if (errorText.includes('unique_printer_model') || \r\n                   (errorText.includes('model') && errorText.includes('duplicate'))) {\r\n          errorMessage = `A printer with model \"${formData.model?.trim() || ''}\" already exists. Please choose a different model.`;\r\n        } else {\r\n          errorMessage = 'A printer with the same name or model already exists. Please use different values.';\r\n        }\r\n      } else if (error.message?.includes('permission denied') || error.message?.includes('unauthorized')) {\r\n        errorTitle = 'Permission Error';\r\n        errorMessage = 'You do not have permission to add printers. Please contact your administrator.';\r\n      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {\r\n        errorTitle = 'Connection Error';\r\n        errorMessage = 'Network error occurred. Please check your connection and try again.';\r\n      }\r\n      \r\n      setErrorMsg(errorMessage);\r\n      toast({\r\n        title: errorTitle,\r\n        description: errorMessage,\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // FIXED: Clean up preview URL when modal closes\r\n  const handleClose = () => {\r\n    if (imagePreview && imagePreview.startsWith('blob:')) {\r\n      URL.revokeObjectURL(imagePreview);\r\n    }\r\n    onClose();\r\n  };\r\n\r\n  // FIXED: Clean up preview URL on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (imagePreview && imagePreview.startsWith('blob:')) {\r\n        URL.revokeObjectURL(imagePreview);\r\n      }\r\n    };\r\n  }, [imagePreview]);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm flex items-end sm:items-center justify-center z-50\">\r\n      {/* Mobile-first modal container */}\r\n      <div className=\"bg-white w-full h-full sm:h-auto sm:max-h-[95vh] sm:max-w-lg sm:rounded-2xl sm:shadow-2xl flex flex-col\">\r\n        \r\n        {/* Header with Auto-Generated Printer Name */}\r\n        <div className=\"sticky top-0 z-10 bg-white border-b border-gray-100 sm:rounded-t-2xl\">\r\n          <div className=\"p-4 text-center\">\r\n            <button\r\n              onClick={handleClose}\r\n              className=\"absolute right-4 top-4 p-1.5 text-gray-400 hover:text-gray-600 transition-colors rounded-lg hover:bg-gray-100\"\r\n            >\r\n              <X className=\"h-5 w-5\" />\r\n            </button>\r\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-1\">\r\n              {printerName}\r\n            </h2>\r\n            <p className=\"text-sm text-gray-500\">\r\n              {printerName === 'New Printer' \r\n                ? 'Enter details to generate printer name' \r\n                : 'Auto-generated from manufacturer, series & model'\r\n              }\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Scrollable Content - Hierarchy Order */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          <form onSubmit={handleSubmit} className=\"p-4 space-y-4\">\r\n            \r\n            {/* 1. Printer Image */}\r\n            <div className=\"space-y-2\">\r\n              <Label className=\"text-sm font-medium text-gray-900\">\r\n                Printer Image\r\n              </Label>\r\n              \r\n              <div className=\"flex items-center gap-3\">\r\n                {imagePreview || formData.image_url ? (\r\n                  <div className=\"relative\">\r\n                    <img \r\n                      src={imagePreview || formData.image_url} \r\n                      alt=\"Printer Preview\" \r\n                      className=\"w-20 h-20 object-cover rounded-lg border border-gray-200\" \r\n                      onError={(e) => {\r\n                        e.currentTarget.style.display = 'none';\r\n                      }}\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-0.5 hover:bg-red-600 transition-colors\"\r\n                      onClick={handleRemoveImage}\r\n                      title=\"Remove image\"\r\n                    >\r\n                      <X className=\"h-3 w-3\" />\r\n                    </button>\r\n                    {/* Show preview indicator */}\r\n                    {imageFile && (\r\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-blue-600 bg-opacity-90 text-white text-xs px-1 py-0.5 rounded-b-lg text-center\">\r\n                        Preview\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <label className=\"flex flex-col items-center justify-center w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 hover:bg-blue-50 transition-colors\">\r\n                    <Upload className=\"h-5 w-5 text-gray-400 mb-1\" />\r\n                    <span className=\"text-xs text-gray-500\">Upload</span>\r\n                    <input\r\n                      type=\"file\"\r\n                      accept=\"image/*\"\r\n                      className=\"hidden\"\r\n                      onChange={handleImageChange}\r\n                      disabled={isLoading}\r\n                    />\r\n                  </label>\r\n                )}\r\n                \r\n                <div className=\"flex-1\">\r\n                  <Input\r\n                    value={formData.image_url}\r\n                    onChange={(e) => {\r\n                      handleInputChange('image_url', e.target.value);\r\n                      // Clear file preview if URL is entered\r\n                      if (e.target.value && imageFile) {\r\n                        if (imagePreview && imagePreview.startsWith('blob:')) {\r\n                          URL.revokeObjectURL(imagePreview);\r\n                        }\r\n                        setImageFile(null);\r\n                        setImagePreview('');\r\n                      }\r\n                    }}\r\n                    placeholder=\"Or paste image URL...\"\r\n                    className=\"h-11\"\r\n                    disabled={!!imageFile || isLoading}\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              {/* Show file info when file is selected */}\r\n              {imageFile && (\r\n                <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\r\n                  📁 {imageFile.name} ({(imageFile.size / 1024 / 1024).toFixed(2)} MB) - Will upload when printer is saved\r\n                </div>\r\n              )}\r\n              \r\n              {errorMsg && (\r\n                <div className=\"text-red-500 text-sm\">{errorMsg}</div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 2. Model */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"model\" className=\"text-sm font-medium text-gray-900\">\r\n                Model *\r\n              </Label>\r\n              <Input\r\n                id=\"model\"\r\n                value={formData.model}\r\n                onChange={(e) => handleInputChange('model', e.target.value)}\r\n                required\r\n                className=\"h-11\"\r\n                placeholder=\"e.g., M404dn, P1006, TS3520\"\r\n              />\r\n              <p className=\"text-xs text-gray-500\">\r\n                Enter only the model number (e.g., M404dn, P1006) without manufacturer or series\r\n              </p>\r\n            </div>\r\n\r\n            {/* 3. Manufacturer */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"manufacturer\" className=\"text-sm font-medium text-gray-900\">\r\n                Manufacturer *\r\n              </Label>\r\n              {!showCustomManufacturer ? (\r\n                <Select value={formData.manufacturer} onValueChange={handleManufacturerChange}>\r\n                  <SelectTrigger className=\"h-11\">\r\n                    <SelectValue placeholder=\"Select manufacturer...\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {manufacturerOptions.map((manufacturer) => (\r\n                      <SelectItem key={manufacturer} value={manufacturer}>\r\n                        {manufacturer}\r\n                      </SelectItem>\r\n                    ))}\r\n                    <SelectItem value=\"custom\" className=\"border-t mt-1 pt-2\">\r\n                      <div className=\"flex items-center\">\r\n                        <Plus className=\"h-3 w-3 mr-2\" />\r\n                        Add Custom Manufacturer\r\n                      </div>\r\n                    </SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <Input\r\n                    value={customManufacturer}\r\n                    onChange={(e) => handleCustomManufacturerChange(e.target.value)}\r\n                    className=\"h-11\"\r\n                    placeholder=\"Enter custom manufacturer\"\r\n                    autoFocus\r\n                  />\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        setShowCustomManufacturer(false);\r\n                        setCustomManufacturer('');\r\n                        handleInputChange('manufacturer', '');\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      type=\"button\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        if (customManufacturer.trim()) {\r\n                          setShowCustomManufacturer(false);\r\n                        }\r\n                      }}\r\n                      disabled={!customManufacturer.trim()}\r\n                    >\r\n                      <Check className=\"h-3 w-3 mr-1\" />\r\n                      Confirm\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 4. Series */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"series\" className=\"text-sm font-medium text-gray-900\">\r\n                Series\r\n              </Label>\r\n              {!showCustomSeries ? (\r\n                <Select \r\n                  value={formData.series} \r\n                  onValueChange={handleSeriesChange}\r\n                  disabled={!formData.manufacturer}\r\n                >\r\n                  <SelectTrigger className=\"h-11\">\r\n                    <SelectValue \r\n                      placeholder={\r\n                        !formData.manufacturer \r\n                          ? \"Select manufacturer first...\" \r\n                          : seriesOptions.length === 0 \r\n                            ? \"No series found\"\r\n                            : \"Select series...\"\r\n                      } \r\n                    />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {seriesOptions.length > 0 ? (\r\n                      <>\r\n                        {seriesOptions.map((series) => (\r\n                          <SelectItem key={series} value={series}>\r\n                            {series}\r\n                          </SelectItem>\r\n                        ))}\r\n                        <SelectItem value=\"custom\" className=\"border-t mt-1 pt-2\">\r\n                          <div className=\"flex items-center\">\r\n                            <Plus className=\"h-3 w-3 mr-2\" />\r\n                            Add Custom Series\r\n                          </div>\r\n                        </SelectItem>\r\n                      </>\r\n                    ) : formData.manufacturer ? (\r\n                      <SelectItem value=\"custom\">\r\n                        <div className=\"flex items-center\">\r\n                          <Plus className=\"h-3 w-3 mr-2\" />\r\n                          Add New Series for {formData.manufacturer}\r\n                        </div>\r\n                      </SelectItem>\r\n                    ) : null}\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <div className=\"space-y-2\">\r\n                  <Input\r\n                    value={customSeries}\r\n                    onChange={(e) => handleCustomSeriesChange(e.target.value)}\r\n                    className=\"h-11\"\r\n                    placeholder={`Enter series for ${formData.manufacturer}`}\r\n                    autoFocus\r\n                  />\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        setShowCustomSeries(false);\r\n                        setCustomSeries('');\r\n                        handleInputChange('series', '');\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      type=\"button\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        if (customSeries.trim()) {\r\n                          setShowCustomSeries(false);\r\n                        }\r\n                      }}\r\n                      disabled={!customSeries.trim()}\r\n                    >\r\n                      <Check className=\"h-3 w-3 mr-1\" />\r\n                      Confirm\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* 5. Color Type (renumbered from 7) */}\r\n            <div className=\"space-y-2\">\r\n              <Label className=\"text-sm font-medium text-gray-900\">\r\n                Color Type\r\n              </Label>\r\n              <div className=\"flex gap-4\">\r\n                <label className=\"flex items-center space-x-2 cursor-pointer\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"colorType\"\r\n                    checked={colorType === 'colored'}\r\n                    onChange={() => handleColorTypeChange('colored')}\r\n                    className=\"h-4 w-4 text-blue-600\"\r\n                  />\r\n                  <span className=\"text-sm\">Colored (CYMK)</span>\r\n                </label>\r\n                \r\n                <label className=\"flex items-center space-x-2 cursor-pointer\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"colorType\"\r\n                    checked={colorType === 'monochrome'}\r\n                    onChange={() => handleColorTypeChange('monochrome')}\r\n                    className=\"h-4 w-4 text-gray-600\"\r\n                  />\r\n                  <span className=\"text-sm\">Monochrome</span>\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 6. Connectivity Options (renumbered from 8) */}\r\n            <div className=\"space-y-2\">\r\n              <Label className=\"text-sm font-medium text-gray-900\">\r\n                Connectivity Options\r\n              </Label>\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                <label className=\"flex items-center justify-between cursor-pointer p-2 border rounded-lg hover:bg-gray-50\">\r\n                  <span className=\"text-sm\">USB</span>\r\n                  <Switch\r\n                    checked={formData.connectivity_usb || false}\r\n                    onCheckedChange={(checked) => handleInputChange('connectivity_usb', checked)}\r\n                    className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\r\n                  />\r\n                </label>\r\n                <label className=\"flex items-center justify-between cursor-pointer p-2 border rounded-lg hover:bg-gray-50\">\r\n                  <span className=\"text-sm\">Wi-Fi</span>\r\n                  <Switch\r\n                    checked={formData.connectivity_wifi || false}\r\n                    onCheckedChange={(checked) => handleInputChange('connectivity_wifi', checked)}\r\n                    className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\r\n                  />\r\n                </label>\r\n                <label className=\"flex items-center justify-between cursor-pointer p-2 border rounded-lg hover:bg-gray-50\">\r\n                  <span className=\"text-sm\">Wi-Fi Direct</span>\r\n                  <Switch\r\n                    checked={formData.connectivity_wifi_direct || false}\r\n                    onCheckedChange={(checked) => handleInputChange('connectivity_wifi_direct', checked)}\r\n                    className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\r\n                  />\r\n                </label>\r\n                <label className=\"flex items-center justify-between cursor-pointer p-2 border rounded-lg hover:bg-gray-50\">\r\n                  <span className=\"text-sm\">Ethernet</span>\r\n                  <Switch\r\n                    checked={formData.connectivity_ethernet || false}\r\n                    onCheckedChange={(checked) => handleInputChange('connectivity_ethernet', checked)}\r\n                    className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\r\n                  />\r\n                </label>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 7. Supported Paper Sizes (renumbered from 9) */}\r\n            <div className=\"space-y-2\">\r\n              <Label className=\"text-sm font-medium text-gray-900\">\r\n                Supported Paper Sizes\r\n              </Label>\r\n              <div className=\"grid grid-cols-2 gap-3\">\r\n                {paperSizes.map((paperSize) => (\r\n                  <label key={paperSize} className=\"flex items-center space-x-2 cursor-pointer p-2 border rounded-lg hover:bg-gray-50\">\r\n                    <Checkbox\r\n                      id={`paper-${paperSize}`}\r\n                      checked={selectedPaperSizes.includes(paperSize)}\r\n                      onCheckedChange={(checked) => handlePaperSizeChange(paperSize, checked as boolean)}\r\n                    />\r\n                    <span className=\"text-sm\">{paperSize}</span>\r\n                  </label>\r\n                ))}\r\n              </div>\r\n              \r\n              {selectedPaperSizes.length > 0 && (\r\n                <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\r\n                  Selected: {selectedPaperSizes.join(', ')}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"sticky bottom-0 z-10 bg-white border-t border-gray-100 sm:rounded-b-2xl\">\r\n          <div className=\"p-4\">\r\n            <div className=\"flex gap-3\">\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                onClick={handleClose}\r\n                disabled={isLoading}\r\n                className=\"flex-1 h-11\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={handleSubmit}\r\n                disabled={isLoading || !formData.manufacturer || !formData.model}\r\n                className=\"flex-1 h-11 bg-blue-600 hover:bg-blue-700 text-white\"\r\n              >\r\n                {isLoading ? (\r\n                  <div className=\"flex items-center\">\r\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                    {imageFile ? 'Uploading & Adding...' : 'Adding...'}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center\">\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    Add Printer\r\n                  </div>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddPrinterModal;\r\n","// import { offlineStorage } from './offlineStorageService';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\nexport interface NormalizedPrinter {\r\n  id: string;\r\n  name: string;\r\n  manufacturer?: string;\r\n  model?: string;\r\n  series?: string;\r\n  color?: string;\r\n  image_url?: string;\r\n  rental_eligible?: boolean;\r\n  status?: string;\r\n}\r\n\r\nexport interface NormalizedAssignment {\r\n  id: string;\r\n  printer_id: string;\r\n  serial_number?: string;\r\n  usage_type?: string;\r\n  status: string;\r\n  client_id?: string;\r\n  department_location_id?: string;\r\n  assignment_effective_date?: string;\r\n  condition?: string;\r\n  reason_for_change?: string;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  is_client_owned?: boolean;\r\n}\r\n\r\nexport interface NormalizedClient {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface NormalizedDepartmentLocation {\r\n  id: string;\r\n  name: string;\r\n  department?: {\r\n    id: string;\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport interface NormalizedData {\r\n  printers: Record<string, NormalizedPrinter>;\r\n  assignments: Record<string, NormalizedAssignment>;\r\n  clients: Record<string, NormalizedClient>;\r\n  departmentLocations: Record<string, NormalizedDepartmentLocation>;\r\n  lastUpdated: number;\r\n}\r\n\r\nexport class DataService {\r\n  private static instance: DataService;\r\n  private normalizedData: NormalizedData = {\r\n    printers: {},\r\n    assignments: {},\r\n    clients: {},\r\n    departmentLocations: {},\r\n    lastUpdated: 0\r\n  };\r\n\r\n  static getInstance(): DataService {\r\n    if (!DataService.instance) {\r\n      DataService.instance = new DataService();\r\n    }\r\n    return DataService.instance;\r\n  }\r\n\r\n  // Normalize raw assignment data from Supabase\r\n  normalizeAssignmentData(rawAssignments: any[]): NormalizedData {\r\n    const normalized: NormalizedData = {\r\n      printers: {},\r\n      assignments: {},\r\n      clients: {},\r\n      departmentLocations: {},\r\n      lastUpdated: Date.now()\r\n    };\r\n\r\n    rawAssignments.forEach(assignment => {\r\n      // Normalize printer\r\n      if (assignment.printer) {\r\n        normalized.printers[assignment.printer.id] = {\r\n          id: assignment.printer.id,\r\n          name: assignment.printer.name,\r\n          manufacturer: assignment.printer.manufacturer,\r\n          model: assignment.printer.model,\r\n          series: assignment.printer.series,\r\n          color: assignment.printer.color,\r\n          image_url: assignment.printer.image_url,\r\n          rental_eligible: assignment.printer.rental_eligible,\r\n          status: assignment.printer.status\r\n        };\r\n      }\r\n\r\n      // Normalize assignment\r\n      normalized.assignments[assignment.id] = {\r\n        id: assignment.id,\r\n        printer_id: assignment.printer_id,\r\n        serial_number: assignment.serial_number,\r\n        usage_type: assignment.usage_type,\r\n        status: assignment.status,\r\n        client_id: assignment.client_id,\r\n        department_location_id: assignment.department_location_id,\r\n        assignment_effective_date: assignment.assignment_effective_date,\r\n        condition: assignment.condition,\r\n        reason_for_change: assignment.reason_for_change,\r\n        notes: assignment.notes,\r\n        created_at: assignment.created_at,\r\n        updated_at: assignment.updated_at,\r\n        is_client_owned: assignment.is_client_owned,\r\n      };\r\n\r\n      // Normalize client\r\n      if (assignment.clients) {\r\n        normalized.clients[assignment.clients.id] = {\r\n          id: assignment.clients.id,\r\n          name: assignment.clients.name\r\n        };\r\n      }\r\n\r\n      // Normalize department location\r\n      if (assignment.departments_location) {\r\n        normalized.departmentLocations[assignment.departments_location.id] = {\r\n          id: assignment.departments_location.id,\r\n          name: assignment.departments_location.name,\r\n          department: assignment.departments_location.department\r\n        };\r\n      }\r\n    });\r\n\r\n    return normalized;\r\n  }\r\n\r\n  // Cache normalized data\r\n  cacheNormalizedData(data: NormalizedData): void {\r\n    this.normalizedData = data;\r\n    // offlineStorage.setItem('normalized_printer_data', data);\r\n  }\r\n\r\n  // Get cached normalized data\r\n  getCachedNormalizedData(): NormalizedData | null {\r\n    if (this.normalizedData.lastUpdated > 0) {\r\n      return this.normalizedData;\r\n    }\r\n    \r\n    const cached = null;\r\n    if (false) {\r\n      this.normalizedData = cached;\r\n      return cached;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // Transform normalized data back to display format\r\n  denormalizePrinterData(filter: 'assigned' | 'available' | 'inventory' | 'catalog'): any[] {\r\n    const cached = this.getCachedNormalizedData();\r\n    if (!cached) return [];\r\n\r\n    const { printers, assignments, clients, departmentLocations } = cached;\r\n\r\n    switch (filter) {\r\n      case 'assigned':\r\n        const assignedAssignments = Object.values(assignments)\r\n          .filter(assignment => \r\n            (assignment.status === 'active' || assignment.status === 'inactive' || assignment.status === 'undeployed') && \r\n            assignment.client_id !== null && \r\n            assignment.client_id !== undefined\r\n          );\r\n\r\n        // Group by printer_id and count assigned units\r\n        const groupedAssigned = assignedAssignments.reduce((acc, assignment) => {\r\n          const printer = printers[assignment.printer_id];\r\n          if (!printer) return acc;\r\n\r\n          if (!acc[printer.id]) {\r\n            acc[printer.id] = {\r\n              printer,\r\n              assignments: [],\r\n              count: 0\r\n            };\r\n          }\r\n          \r\n          acc[printer.id].assignments.push({\r\n            ...assignment,\r\n            clients: assignment.client_id ? clients[assignment.client_id] : null,\r\n            departments_location: assignment.department_location_id ? departmentLocations[assignment.department_location_id] : null\r\n          });\r\n          acc[printer.id].count++;\r\n          \r\n          return acc;\r\n        }, {} as Record<string, any>);\r\n\r\n        return Object.values(groupedAssigned).map(group => ({\r\n          ...group.printer,\r\n          printer_assignments: group.assignments,\r\n          assigned_count: group.count\r\n        }));\r\n      case 'available':\r\n        const availableAssignments = Object.values(assignments)\r\n          .filter(assignment => assignment.client_id == null || assignment.client_id === '');\r\n\r\n        // Group by printer_id and count available units\r\n        const groupedAvailable = availableAssignments.reduce((acc, assignment) => {\r\n          const printer = printers[assignment.printer_id];\r\n          if (!printer) return acc;\r\n\r\n          if (!acc[printer.id]) {\r\n            acc[printer.id] = {\r\n              printer,\r\n              assignments: [],\r\n              count: 0\r\n            };\r\n          }\r\n          \r\n          acc[printer.id].assignments.push({\r\n            ...assignment,\r\n            clients: assignment.client_id ? clients[assignment.client_id] : null,\r\n            departments_location: assignment.department_location_id ? departmentLocations[assignment.department_location_id] : null\r\n          });\r\n          acc[printer.id].count++;\r\n          \r\n          return acc;\r\n        }, {} as Record<string, any>);\r\n\r\n        return Object.values(groupedAvailable).map(group => ({\r\n          ...group.printer,\r\n          printer_assignments: group.assignments,\r\n          available_count: group.count\r\n        }));\r\n      case 'inventory':\r\n        // No additional filters for inventory, return all assignments\r\n        return Object.values(assignments).map(assignment => ({\r\n          ...assignment,\r\n          printer: printers[assignment.printer_id],\r\n          clients: assignment.client_id ? clients[assignment.client_id] : null,\r\n          departments_location: assignment.department_location_id ? departmentLocations[assignment.department_location_id] : null\r\n        }));\r\n      case 'catalog':\r\n        return Object.values(printers);\r\n\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n\r\n  // Preload data for predicted tab switches\r\n  async preloadTabData(currentTab: string): Promise<void> {\r\n    const preloadOrder = this.getPredictedTabs(currentTab);\r\n    \r\n    for (const tab of preloadOrder) {\r\n      try {\r\n        await this.prefetchTabData(tab);\r\n      } catch (error) {\r\n        console.warn(`Failed to preload data for tab ${tab}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getPredictedTabs(currentTab: string): string[] {\r\n    // Define likely tab navigation patterns\r\n    const navigationPatterns: Record<string, string[]> = {\r\n      'assigned': ['available', 'all'],\r\n      'available': ['assigned', 'catalog'],\r\n      'catalog': ['available', 'assigned'],\r\n      'all': ['assigned', 'available']\r\n    };\r\n\r\n    return navigationPatterns[currentTab] || [];\r\n  }\r\n\r\n  async prefetchTabData(tab: string): Promise<void> {\r\n    // Only prefetch if not already cached\r\n    const cached = this.getCachedNormalizedData();\r\n    if (false) {\r\n      return;\r\n    }\r\n\r\n    // Prefetch data based on tab requirements\r\n    switch (tab) {\r\n      case 'assigned':\r\n      case 'available':\r\n      case 'all':\r\n        await this.prefetchAssignmentData();\r\n        break;\r\n      case 'catalog':\r\n        await this.prefetchCatalogData();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async prefetchAssignmentData(): Promise<void> {\r\n    const { data } = await supabase\r\n      .from('printer_assignments')\r\n      .select(`\r\n        id,\r\n        printer_id,\r\n        serial_number,\r\n        usage_type,\r\n        status,\r\n        client_id,\r\n        department_location_id,\r\n        assignment_effective_date,\r\n        condition,\r\n        reason_for_change,\r\n        notes,\r\n        created_at,\r\n        updated_at,\r\n        is_client_owned,\r\n        printer:printers(\r\n          id,\r\n          name,\r\n          manufacturer,\r\n          model,\r\n          series,\r\n          color,\r\n          image_url,\r\n          rental_eligible,\r\n          status\r\n        ),\r\n        clients(id, name),\r\n        departments_location(\r\n          id,\r\n          name,\r\n          department:departments(id, name)\r\n        )\r\n      `)\r\n      .neq('printer.status', 'deleted')\r\n      .order('printer(name)');\r\n\r\n    if (data) {\r\n      const normalized = this.normalizeAssignmentData(data);\r\n      this.cacheNormalizedData(normalized);\r\n    }\r\n  }\r\n\r\n  private async prefetchCatalogData(): Promise<void> {\r\n    const { data } = await supabase\r\n      .from('printers')\r\n      .select(`\r\n        id,\r\n        name,\r\n        manufacturer,\r\n        model,\r\n        series,\r\n        color,\r\n        image_url,\r\n        rental_eligible,\r\n        status\r\n      `)\r\n      .neq('status', 'deleted')\r\n      .order('name');\r\n\r\n    if (data) {\r\n      // Update only printers in normalized data\r\n      const cached = this.getCachedNormalizedData() || {\r\n        printers: {},\r\n        assignments: {},\r\n        clients: {},\r\n        departmentLocations: {},\r\n        lastUpdated: 0\r\n      };\r\n\r\n      data.forEach(printer => {\r\n        cached.printers[printer.id] = printer;\r\n      });\r\n\r\n      cached.lastUpdated = Date.now();\r\n      this.cacheNormalizedData(cached);\r\n    }\r\n  }\r\n\r\n  // Clear all cached data\r\n  clearCache(): void {\r\n    this.normalizedData = {\r\n      printers: {},\r\n      assignments: {},\r\n      clients: {},\r\n      departmentLocations: {},\r\n      lastUpdated: 0\r\n    };\r\n    // offlineStorage.clearCache();\r\n  }\r\n}\r\n\r\nexport const dataService = DataService.getInstance();\r\n","import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { CompatibleProducts } from './components/CompatibleProducts';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Search, Printer, ArrowLeft, ArrowRight, X, Package, Settings, Check, Users, Building, Calendar, DollarSign, Shield, AlertCircle, RefreshCw } from 'lucide-react';\r\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { clientService } from '@/services/clientService';\r\nimport { CustomLoading } from \"@/components/ui/CustomLoading\";\r\nimport { dataService } from '@/services/dataService';\r\nimport { useAuth } from '@/hooks/useAuth';\r\n\r\ninterface AssignModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onAssigned: () => void;\r\n  preSelectedClientId?: string;\r\n}\r\n\r\ninterface PrinterAssignment {\r\n  id: string;\r\n  printer_id: string;\r\n  serial_number: string;\r\n  usage_type: string;\r\n  status: string;\r\n  client_id?: string;\r\n  department_location_id?: string;\r\n  printer: {\r\n    id: string;\r\n    name: string;\r\n    manufacturer?: string;\r\n    model?: string;\r\n    series?: string;\r\n    color?: string;\r\n    image_url?: string;\r\n  };\r\n  client?: {\r\n    id: string;\r\n    name: string;\r\n  };\r\n  department_location?: {\r\n    id: string;\r\n    name: string;\r\n    department: {\r\n      name: string;\r\n    };\r\n  };\r\n}\r\n\r\ninterface Client {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport const AssignModal: React.FC<AssignModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onAssigned,\r\n  preSelectedClientId\r\n}) => {\r\n  const location = useLocation();\r\n  const isClientPage = location.pathname.includes('/clients/');\r\n  const currentClientId = preSelectedClientId || (isClientPage ? location.pathname.split('/clients/')[1] : null);\r\n  const queryClient = useQueryClient();\r\n  \r\n  const [step, setStep] = useState<1 | 2>(1);\r\n  const [selectedAssignment, setSelectedAssignment] = useState<PrinterAssignment | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [clients, setClients] = useState<Client[]>([]);\r\n  const [departmentLocationOptions, setDepartmentLocationOptions] = useState<{ id: string; name: string; location?: string }[]>([]);\r\n  const [isTransferMode, setIsTransferMode] = useState(false);\r\n  const [showOtherClients, setShowOtherClients] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    clientId: preSelectedClientId || '',\r\n    departmentLocationId: '',\r\n    deploymentDate: '',\r\n    assignToPool: false,\r\n    usageType: 'service_unit',\r\n    monthlyPrice: '',\r\n    hasSecurityDeposit: false,\r\n    securityDepositAmount: '',\r\n    notes: '',\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [deptsLoading, setDeptsLoading] = useState(false);\r\n  const { toast } = useToast();\r\n  const { userProfile } = useAuth();\r\n\r\n  // Fetch printer assignments based on mode and context\r\n  const { data: printerAssignments = [], isLoading: assignmentsLoading } = useQuery({\r\n    queryKey: ['printer-assignments', isTransferMode, showOtherClients, currentClientId, isClientPage],\r\n    queryFn: async () => {\r\n      let query = supabase\r\n        .from('printer_assignments')\r\n        .select(`\r\n          id,\r\n          printer_id,\r\n          serial_number,\r\n          usage_type,\r\n          status,\r\n          client_id,\r\n          department_location_id,\r\n          printer:printers(\r\n            id,\r\n            name,\r\n            manufacturer,\r\n            model,\r\n            series,\r\n            color,\r\n            image_url\r\n          ),\r\n          client:clients(\r\n            id,\r\n            name\r\n          ),\r\n          department_location:departments_location(\r\n            id,\r\n            name,\r\n            department:departments(\r\n              name\r\n            )\r\n          )\r\n        `);\r\n\r\n      if (!isTransferMode) {\r\n        // Assign Mode: Only show truly unassigned printers (exclude pooled)\r\n        query = query.eq('status', 'available');\r\n      } else {\r\n        // Transfer Mode: Include pooled printers appropriately\r\n        if (isClientPage && currentClientId && !showOtherClients) {\r\n          // Show this client's assigned, inactive, and pooled printers\r\n          query = query.eq('client_id', currentClientId).in('status', ['active', 'inactive', 'undeployed']);\r\n        } else if (isClientPage && currentClientId && showOtherClients) {\r\n          // Show other clients' assigned and pooled printers\r\n          query = query.neq('client_id', currentClientId).in('status', ['active', 'undeployed']);\r\n        } else {\r\n          // Printer dashboard - show all assigned and pooled printers\r\n          query = query.in('status', ['active', 'undeployed']);\r\n        }\r\n      }\r\n\r\n      const { data, error } = await query.order('printer(name)');\r\n      if (error) throw error;\r\n      return data as PrinterAssignment[];\r\n    },\r\n    enabled: isOpen && step === 1\r\n  });\r\n\r\n  // Fetch clients\r\n  const { data: clientsData = [] } = useQuery({\r\n    queryKey: ['clients'],\r\n    queryFn: async () => {\r\n      const clients = await clientService.getClients();\r\n      setClients(clients);\r\n      return clients;\r\n    },\r\n    enabled: isOpen && step === 2\r\n  });\r\n\r\n  // Fetch department locations for selected client\r\n  React.useEffect(() => {\r\n    const fetchDeptLocs = async () => {\r\n      if (!formData.clientId || formData.assignToPool) {\r\n        setDepartmentLocationOptions([]);\r\n        return;\r\n      }\r\n      setDeptsLoading(true);\r\n      try {\r\n        const options = await clientService.getDepartmentsByClient(formData.clientId);\r\n        setDepartmentLocationOptions(options);\r\n      } catch (e) {\r\n        setDepartmentLocationOptions([]);\r\n      }\r\n      setDeptsLoading(false);\r\n    };\r\n    fetchDeptLocs();\r\n  }, [formData.clientId, formData.assignToPool]);\r\n\r\n  // Set initial deployment date\r\n  React.useEffect(() => {\r\n    if (isOpen && step === 2) {\r\n      const today = new Date().toISOString().split('T')[0];\r\n      setFormData(prev => ({ \r\n        ...prev, \r\n        deploymentDate: today,\r\n        clientId: preSelectedClientId || ''\r\n      }));\r\n    }\r\n  }, [isOpen, step, preSelectedClientId]);\r\n\r\n  const filteredAssignments = printerAssignments.filter(assignment =>\r\n    assignment.printer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n    (assignment.printer.model && assignment.printer.model.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n    (assignment.printer.manufacturer && assignment.printer.manufacturer.toLowerCase().includes(searchQuery.toLowerCase())) ||\r\n    assignment.serial_number.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n    (assignment.client?.name && assignment.client.name.toLowerCase().includes(searchQuery.toLowerCase()))\r\n  );\r\n\r\n  // Group printers by client\r\n  const groupedAssignments = React.useMemo(() => {\r\n    const groups: { [key: string]: PrinterAssignment[] } = {};\r\n    \r\n    filteredAssignments.forEach(assignment => {\r\n      const clientKey = assignment.client?.name || 'Unassigned';\r\n      if (!groups[clientKey]) {\r\n        groups[clientKey] = [];\r\n      }\r\n      groups[clientKey].push(assignment);\r\n    });\r\n\r\n    return groups;\r\n  }, [filteredAssignments]);\r\n\r\n  const handleAssignmentSelect = (assignment: PrinterAssignment) => {\r\n    setSelectedAssignment(assignment);\r\n    setStep(2);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedAssignment || !formData.clientId || !formData.deploymentDate) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please fill in all required fields.',\r\n        variant: 'destructive'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // If not assigning to pool, require department/location\r\n    if (!formData.assignToPool && !formData.departmentLocationId) {\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Please select a department/location or choose to assign to client pool.',\r\n        variant: 'destructive'\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const updateData: any = {\r\n        client_id: formData.clientId,\r\n        deployment_date: formData.deploymentDate,\r\n        usage_type: formData.usageType,\r\n        monthly_price: formData.usageType === 'rental' && formData.monthlyPrice ? parseFloat(formData.monthlyPrice) : null,\r\n        has_security_deposit: formData.hasSecurityDeposit,\r\n        security_deposit_amount: formData.hasSecurityDeposit && formData.securityDepositAmount ? parseFloat(formData.securityDepositAmount) : null,\r\n        notes: formData.notes || null,\r\n      };\r\n\r\n      // Set status and department_location_id based on assignment type\r\n      if (formData.assignToPool) {\r\n        updateData.status = 'undeployed';\r\n        updateData.department_location_id = null;\r\n      } else {\r\n        updateData.status = 'active';\r\n        updateData.department_location_id = formData.departmentLocationId;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('printer_assignments')\r\n        .update(updateData)\r\n        .eq('id', selectedAssignment.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: formData.assignToPool \r\n          ? 'Printer assigned to client pool successfully!' \r\n          : isTransferMode \r\n            ? 'Printer transferred successfully!'\r\n            : 'Printer assigned to client successfully!',\r\n      });\r\n\r\n      // Clear dataService cache\r\n      dataService.clearCache();\r\n      \r\n      // Invalidate React Query cache for all printer-related queries\r\n      await queryClient.invalidateQueries({ queryKey: ['all-assignments'] });\r\n      await queryClient.invalidateQueries({ queryKey: ['available-assignments'] });\r\n      await queryClient.invalidateQueries({ queryKey: ['assigned-assignments'] });\r\n      await queryClient.invalidateQueries({ queryKey: ['optimized-printer-data'] });\r\n      await queryClient.invalidateQueries({ queryKey: ['printer-assignments'] });\r\n      \r\n      // Invalidate client-specific queries if on client page\r\n      if (isClientPage && currentClientId) {\r\n        await queryClient.invalidateQueries({ queryKey: ['client-printer-assignments', currentClientId] });\r\n        await queryClient.invalidateQueries({ queryKey: ['client-departments', currentClientId] });\r\n      }\r\n      \r\n      // Dispatch custom event to refresh printer data (for real-time subscription)\r\n      window.dispatchEvent(new CustomEvent('refresh-printer-data'));\r\n      \r\n      onAssigned();\r\n      handleClose();\r\n    } catch (error: any) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.message || `Failed to ${isTransferMode ? 'transfer' : 'assign'} printer.`,\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setStep(1);\r\n    setSelectedAssignment(null);\r\n    setSearchQuery('');\r\n    setIsTransferMode(false);\r\n    setShowOtherClients(false);\r\n    setFormData({\r\n      clientId: preSelectedClientId || '',\r\n      departmentLocationId: '',\r\n      deploymentDate: '',\r\n      assignToPool: false,\r\n      usageType: 'service_unit',\r\n      monthlyPrice: '',\r\n      hasSecurityDeposit: false,\r\n      securityDepositAmount: '',\r\n      notes: '',\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setStep(1);\r\n    setSelectedAssignment(null);\r\n  };\r\n\r\n  const getStatusBadge = (assignment: PrinterAssignment) => {\r\n    const status = assignment.status;\r\n    const hasLocation = assignment.department_location_id;\r\n    \r\n    if (status === 'available') {\r\n      return <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-700\">Available</Badge>;\r\n    } else if (status === 'undeployed') {\r\n      return <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-700\">Pooled</Badge>;\r\n    } else if (status === 'active' && hasLocation) {\r\n      return <Badge variant=\"secondary\" className=\"text-xs bg-orange-100 text-orange-700\">Assigned</Badge>;\r\n    }\r\n    return <Badge variant=\"outline\" className=\"text-xs\">{status}</Badge>;\r\n  };\r\n\r\n  const getLocationInfo = (assignment: PrinterAssignment) => {\r\n    if (assignment.department_location) {\r\n      return `${assignment.department_location.department.name} - ${assignment.department_location.name}`;\r\n    }\r\n    return 'No specific location';\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm flex items-end sm:items-center justify-center z-50\">\r\n      <div className=\"relative flex flex-col h-screen w-screen sm:h-auto sm:w-full sm:max-w-lg sm:rounded-2xl sm:shadow-2xl bg-white animate-in fade-in-0 slide-in-from-bottom-8\">\r\n        \r\n        {/* Mobile Header - Sticky */}\r\n        <div className=\"sticky top-0 z-10 bg-white border-b border-gray-200 sm:rounded-t-2xl\">\r\n          <div className=\"flex items-center justify-between p-4 sm:p-6\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <div className=\"bg-blue-100 p-2.5 rounded-xl\">\r\n                {isTransferMode ? <RefreshCw className=\"h-5 w-5 text-blue-600\" /> : <Printer className=\"h-5 w-5 text-blue-600\" />}\r\n              </div>\r\n              <div>\r\n                <h2 className=\"text-lg sm:text-xl font-semibold text-gray-900\">\r\n                  {step === 1 ? \r\n                    (isTransferMode ? 'Transfer Printer' : 'Select Printer') : \r\n                    (isTransferMode ? 'Transfer to Client' : 'Assign to Client')\r\n                  }\r\n                </h2>\r\n                <p className=\"text-xs sm:text-sm text-gray-500\">\r\n                  {step === 1 ? \r\n                    (isTransferMode ? 'Choose a printer to transfer' : 'Choose an available printer') : \r\n                    'Configure assignment details'\r\n                  }\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={handleClose}\r\n              className=\"p-2 -m-2 text-gray-400 hover:text-gray-600 transition-colors rounded-lg hover:bg-gray-100\"\r\n            >\r\n              <X className=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Scrollable Content */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          <div className=\"p-4 sm:p-6 space-y-6\">\r\n            \r\n            {step === 1 && (\r\n              <>\r\n                {/* Mode Selection */}\r\n                <div className=\"bg-gradient-to-br from-purple-50 to-indigo-50 p-4 rounded-xl border border-purple-100\">\r\n                  <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                    <Settings className=\"h-4 w-4 mr-2 text-purple-600\" />\r\n                    Operation Mode\r\n                  </h3>\r\n                  \r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-purple-200\">\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <RefreshCw className=\"h-5 w-5 text-gray-600\" />\r\n                        <div>\r\n                          <Label htmlFor=\"transferMode\" className=\"text-sm font-semibold text-gray-700\">\r\n                            Transfer Mode\r\n                          </Label>\r\n                          <p className=\"text-xs text-gray-500\">Move printers between clients</p>\r\n                        </div>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"transferMode\"\r\n                        checked={isTransferMode}\r\n                        onCheckedChange={setIsTransferMode}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* Other Clients Checkbox - Only show in Transfer Mode and on Client Page */}\r\n                    {isTransferMode && isClientPage && userProfile?.role !== 'client' && (\r\n                      <div className=\"flex items-center space-x-2 p-3 bg-white rounded-lg border border-purple-200\">\r\n                         <Checkbox\r\n                           id=\"otherClients\"\r\n                           checked={showOtherClients}\r\n                           onCheckedChange={(checked) => setShowOtherClients(checked === true)}\r\n                         />\r\n                        <Label htmlFor=\"otherClients\" className=\"text-sm font-semibold text-gray-700\">\r\n                          Show printers from other clients\r\n                        </Label>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Search Section */}\r\n                <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-xl border border-blue-100\">\r\n                  <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                    <Search className=\"h-4 w-4 mr-2 text-blue-600\" />\r\n                    Search {isTransferMode ? 'Printers to Transfer' : 'Available Printers'}\r\n                  </h3>\r\n                  <div className=\"relative\">\r\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder=\"Search by name, model, manufacturer, serial number, or client...\"\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                      className=\"pl-10 h-12 text-base\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Printer List Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-semibold text-gray-900 flex items-center\">\r\n                    <Package className=\"h-4 w-4 mr-2 text-gray-600\" />\r\n                    {isTransferMode ? 'Printers Available for Transfer' : 'Available Printers'}\r\n                  </h3>\r\n                  \r\n                  {assignmentsLoading ? (\r\n                    <CustomLoading />\r\n                  ) : Object.keys(groupedAssignments).length === 0 ? (\r\n                    <div className=\"text-center py-12 bg-gray-50 rounded-xl border border-gray-200\">\r\n                      <Printer className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\r\n                      <p className=\"text-gray-500 font-medium\">\r\n                        No {isTransferMode ? 'printers available for transfer' : 'available printers'} found\r\n                      </p>\r\n                      <p className=\"text-sm text-gray-400 mt-1\">Try adjusting your search criteria</p>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"space-y-6\">\r\n                      {Object.entries(groupedAssignments).map(([clientName, assignments]) => (\r\n                        <div key={clientName} className=\"space-y-3\">\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <Users className=\"h-4 w-4 text-gray-600\" />\r\n                            <h4 className=\"font-medium text-gray-800\">{clientName}</h4>\r\n                            <Badge variant=\"outline\" className=\"text-xs\">{assignments.length}</Badge>\r\n                          </div>\r\n                          \r\n                          <div className=\"space-y-3 pl-6\">\r\n                            {assignments.map((assignment) => (\r\n                              <Card\r\n                                key={assignment.id}\r\n                                className=\"cursor-pointer border-gray-200 hover:border-gray-300 hover:bg-gray-50 hover:shadow-sm transition-all duration-200\"\r\n                                onClick={() => handleAssignmentSelect(assignment)}\r\n                              >\r\n                                <CardContent className=\"p-4\">\r\n                                  <div className=\"flex flex-col\">\r\n                                    {/* Printer Name */}\r\n                                    <div className=\"font-bold text-base text-gray-900 mb-2 truncate\">\r\n                                      {[\r\n                                        assignment.printer.manufacturer,\r\n                                        assignment.printer.series,\r\n                                        assignment.printer.model || assignment.printer.name\r\n                                      ].filter(Boolean).join(' ')}\r\n                                    </div>\r\n                                    <div className=\"flex items-start gap-3\">\r\n                                      {/* Printer Image */}\r\n                                      <div className=\"w-16 h-16 flex-shrink-0 flex items-center justify-center bg-gray-100 rounded-xl border-2 border-gray-200 overflow-hidden\">\r\n                                        {assignment.printer.image_url ? (\r\n                                          <img\r\n                                            src={assignment.printer.image_url}\r\n                                            alt={assignment.printer.name}\r\n                                            className=\"object-contain w-full h-full\"\r\n                                          />\r\n                                        ) : (\r\n                                          <Printer className=\"h-8 w-8 text-gray-400\" />\r\n                                        )}\r\n                                      </div>\r\n                                      {/* Details */}\r\n                                      <div className=\"flex-1 min-w-0 flex flex-col justify-center\">\r\n                                        {assignment.serial_number && (\r\n                                          <div className=\"text-sm text-gray-600\">Serial: {assignment.serial_number}</div>\r\n                                        )}\r\n                                        {assignment.client && (\r\n                                          <div className=\"text-sm text-gray-600\">Client: {assignment.client.name}</div>\r\n                                        )}\r\n                                        {assignment.department_location && (\r\n                                          <div className=\"text-sm text-gray-600\">Location: {getLocationInfo(assignment)}</div>\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                    {/* Badges and Compatible Products */}\r\n                                    <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                                      {getStatusBadge(assignment)}\r\n                                      {assignment.usage_type && (\r\n                                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                                          {assignment.usage_type}\r\n                                        </Badge>\r\n                                      )}\r\n                                      {assignment.printer.color && (\r\n                                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                                          {assignment.printer.color}\r\n                                        </Badge>\r\n                                      )}\r\n                                    </div>\r\n                                    <div className=\"mt-2\">\r\n                                      <CompatibleProducts printerId={assignment.printer.id} className=\"\" />\r\n                                    </div>\r\n                                  </div>\r\n                                </CardContent>\r\n                              </Card>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {step === 2 && selectedAssignment && (\r\n              <>\r\n                {/* Selected Printer Info Section */}\r\n                <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-xl border border-blue-100\">\r\n                  <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                    <Printer className=\"h-4 w-4 mr-2 text-blue-600\" />\r\n                    Selected Printer\r\n                  </h3>\r\n                  <div className=\"flex items-start space-x-4\">\r\n                    <div className=\"w-16 h-16 flex-shrink-0 flex items-center justify-center bg-gray-100 rounded-xl border-2 border-gray-200 overflow-hidden\">\r\n                      {selectedAssignment.printer.image_url ? (\r\n                        <img\r\n                          src={selectedAssignment.printer.image_url}\r\n                          alt={selectedAssignment.printer.name}\r\n                          className=\"object-contain w-full h-full\"\r\n                        />\r\n                      ) : (\r\n                        <Printer className=\"h-8 w-8 text-gray-400\" />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <h3 className=\"font-semibold text-gray-900 text-lg mb-2\">\r\n                        {[\r\n                          selectedAssignment.printer.manufacturer,\r\n                          selectedAssignment.printer.series,\r\n                          selectedAssignment.printer.model || selectedAssignment.printer.name\r\n                        ].filter(Boolean).join(' ')}\r\n                      </h3>\r\n                      <div className=\"flex flex-wrap gap-2 mb-2\">\r\n                        {selectedAssignment.serial_number && (\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {selectedAssignment.serial_number}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      {isTransferMode && selectedAssignment.client && (\r\n                        <div className=\"text-sm text-gray-600\">\r\n                          <p><strong>Current Client:</strong> {selectedAssignment.client.name}</p>\r\n                          {selectedAssignment.department_location && (\r\n                            <p><strong>Current Location:</strong> {getLocationInfo(selectedAssignment)}</p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Compatible Products Section */}\r\n                <div className=\"bg-gradient-to-br from-orange-50 to-amber-50 p-4 rounded-xl border border-orange-100\">\r\n                  <h3 className=\"font-semibold text-gray-900 mb-3 flex items-center\">\r\n                    <Package className=\"h-4 w-4 mr-2 text-orange-600\" />\r\n                    Compatible Products\r\n                  </h3>\r\n                  <CompatibleProducts \r\n                    printerId={selectedAssignment.printer.id} \r\n                    className=\"\" \r\n                  />\r\n                </div>\r\n\r\n                {/* Assignment Form Section */}\r\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n                  {/* Client Selection */}\r\n                  {!preSelectedClientId && (\r\n                    <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-4 rounded-xl border border-green-100\">\r\n                      <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                        <Users className=\"h-4 w-4 mr-2 text-green-600\" />\r\n                        Client Selection\r\n                      </h3>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"clientId\" className=\"text-sm font-semibold text-red-600\">\r\n                          Client *\r\n                        </Label>\r\n                        <Select\r\n                          value={formData.clientId}\r\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, clientId: value, departmentLocationId: '' }))}\r\n                        >\r\n                          <SelectTrigger className=\"w-full h-12 text-left\">\r\n                            <SelectValue placeholder=\"Select a client\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {clients.map(client => (\r\n                              <SelectItem key={client.id} value={client.id}>{client.name}</SelectItem>\r\n                            ))}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Assignment Type Selection */}\r\n                  {formData.clientId && (\r\n                    <div className=\"bg-gradient-to-br from-indigo-50 to-purple-50 p-4 rounded-xl border border-indigo-100\">\r\n                      <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                        <Building className=\"h-4 w-4 mr-2 text-indigo-600\" />\r\n                        Assignment Type\r\n                      </h3>\r\n                      \r\n                      <div className=\"space-y-4\">\r\n                        <div className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-indigo-200\">\r\n                          <div className=\"flex items-center space-x-3\">\r\n                            <Package className=\"h-5 w-5 text-gray-600\" />\r\n                            <div>\r\n                              <Label htmlFor=\"assignToPool\" className=\"text-sm font-semibold text-gray-700\">\r\n                                Assign to Client Pool\r\n                              </Label>\r\n                              <p className=\"text-xs text-gray-500\">Add printer to client's undeployed pool for later assignment</p>\r\n                            </div>\r\n                          </div>\r\n                          <Switch\r\n                            id=\"assignToPool\"\r\n                            checked={formData.assignToPool}\r\n                            onCheckedChange={(checked) => setFormData(prev => ({ \r\n                              ...prev, \r\n                              assignToPool: checked,\r\n                              departmentLocationId: checked ? '' : prev.departmentLocationId\r\n                            }))}\r\n                            disabled={loading}\r\n                          />\r\n                        </div>\r\n\r\n                        {formData.assignToPool && (\r\n                          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\r\n                            <div className=\"flex items-start space-x-2\">\r\n                              <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0\" />\r\n                              <div className=\"text-sm text-yellow-800\">\r\n                                <p className=\"font-medium\">Pool Assignment</p>\r\n                                <p>This printer will be marked as \"UnDeployed\" and added to the client's printer pool. It can be assigned to specific departments and locations later.</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {/* Department & Location - Only show if not assigning to pool */}\r\n                  {formData.clientId && !formData.assignToPool && (\r\n                    <div className=\"bg-gradient-to-br from-purple-50 to-violet-50 p-4 rounded-xl border border-purple-100\">\r\n                      <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                        <Building className=\"h-4 w-4 mr-2 text-purple-600\" />\r\n                        Department & Location\r\n                      </h3>\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"departmentLocationId\" className=\"text-sm font-semibold text-red-600\">\r\n                          Department / Location *\r\n                        </Label>\r\n                        {deptsLoading ? (\r\n                          <div className=\"animate-pulse h-12 bg-gray-200 rounded-lg w-full\"></div>\r\n                        ) : (\r\n                          <Select\r\n                            value={formData.departmentLocationId}\r\n                            onValueChange={(value) => setFormData(prev => ({ ...prev, departmentLocationId: value }))}\r\n                          >\r\n                            <SelectTrigger className=\"w-full h-12 text-left\">\r\n                              <SelectValue placeholder=\"Select a department and location\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {departmentLocationOptions.map(opt => (\r\n                                <SelectItem key={opt.id} value={opt.id}>\r\n                                  {opt.name}\r\n                                </SelectItem>\r\n                              ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Assignment Details */}\r\n                  <div className=\"bg-gradient-to-br from-yellow-50 to-amber-50 p-4 rounded-xl border border-yellow-100\">\r\n                    <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                      <Settings className=\"h-4 w-4 mr-2 text-yellow-600\" />\r\n                      Assignment Details\r\n                    </h3>\r\n                    \r\n                    <div className=\"space-y-4\">\r\n                      {/* Deployment Date */}\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"deploymentDate\" className=\"text-sm font-semibold text-red-600 flex items-center\">\r\n                          <Calendar className=\"h-4 w-4 mr-2\" />\r\n                          {formData.assignToPool ? 'Assignment Date *' : 'Deployment Date *'}\r\n                        </Label>\r\n                        <input\r\n                          type=\"date\"\r\n                          id=\"deploymentDate\"\r\n                          value={formData.deploymentDate}\r\n                          onChange={(e) => setFormData(prev => ({ ...prev, deploymentDate: e.target.value }))}\r\n                          required\r\n                          disabled={loading}\r\n                          className=\"w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 disabled:bg-gray-100 text-base\"\r\n                        />\r\n                      </div>\r\n\r\n                      {/* Usage Type */}\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"usageType\" className=\"text-sm font-semibold text-gray-700\">\r\n                          Usage Type\r\n                        </Label>\r\n                        <Select\r\n                          value={formData.usageType}\r\n                          onValueChange={(value) => setFormData(prev => ({ ...prev, usageType: value }))}\r\n                          disabled={loading}\r\n                        >\r\n                          <SelectTrigger className=\"w-full h-12 text-left\">\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"service_unit\">Service Unit</SelectItem>\r\n                            <SelectItem value=\"client_owned\">Client Owned</SelectItem>\r\n                            <SelectItem value=\"rental\">Rental</SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n\r\n                      {/* Monthly Price for Rental */}\r\n                      {formData.usageType === 'rental' && (\r\n                        <div className=\"space-y-2\">\r\n                          <Label htmlFor=\"monthlyPrice\" className=\"text-sm font-semibold text-gray-700 flex items-center\">\r\n                            <DollarSign className=\"h-4 w-4 mr-2\" />\r\n                            Monthly Rental Price\r\n                          </Label>\r\n                          <input\r\n                            type=\"number\"\r\n                            id=\"monthlyPrice\"\r\n                            value={formData.monthlyPrice}\r\n                            onChange={(e) => setFormData(prev => ({ ...prev, monthlyPrice: e.target.value }))}\r\n                            disabled={loading}\r\n                            min=\"0\"\r\n                            step=\"0.01\"\r\n                            className=\"w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 disabled:bg-gray-100 text-base\"\r\n                            placeholder=\"0.00\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n\r\n                      {/* Security Deposit */}\r\n                      <div className=\"space-y-4\">\r\n                        <div className=\"flex items-center justify-between p-3 bg-white rounded-lg border border-yellow-200\">\r\n                          <div className=\"flex items-center space-x-3\">\r\n                            <Shield className=\"h-5 w-5 text-gray-600\" />\r\n                            <div>\r\n                              <Label htmlFor=\"hasSecurityDeposit\" className=\"text-sm font-semibold text-gray-700\">\r\n                                Security Deposit\r\n                              </Label>\r\n                              <p className=\"text-xs text-gray-500\">Does this assignment require a security deposit?</p>\r\n                            </div>\r\n                          </div>\r\n                          <Switch\r\n                            id=\"hasSecurityDeposit\"\r\n                            checked={formData.hasSecurityDeposit}\r\n                            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, hasSecurityDeposit: checked }))}\r\n                            disabled={loading}\r\n                          />\r\n                        </div>\r\n\r\n                        {formData.hasSecurityDeposit && (\r\n                          <div className=\"space-y-2\">\r\n                            <Label htmlFor=\"securityDepositAmount\" className=\"text-sm font-semibold text-gray-700\">\r\n                              Security Deposit Amount\r\n                            </Label>\r\n                            <input\r\n                              type=\"number\"\r\n                              id=\"securityDepositAmount\"\r\n                              value={formData.securityDepositAmount}\r\n                              onChange={(e) => setFormData(prev => ({ ...prev, securityDepositAmount: e.target.value }))}\r\n                              disabled={loading}\r\n                              min=\"0\"\r\n                              step=\"0.01\"\r\n                              className=\"w-full h-12 px-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 disabled:bg-gray-100 text-base\"\r\n                              placeholder=\"0.00\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n\r\n                      {/* Notes */}\r\n                      <div className=\"space-y-2\">\r\n                        <Label htmlFor=\"notes\" className=\"text-sm font-semibold text-gray-700\">\r\n                          Notes (Optional)\r\n                        </Label>\r\n                        <Textarea\r\n                          id=\"notes\"\r\n                          value={formData.notes}\r\n                          onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\r\n                          disabled={loading}\r\n                          placeholder=\"Additional notes about this assignment...\"\r\n                          className=\"w-full min-h-[100px] resize-none text-base\"\r\n                          rows={4}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Footer - Sticky */}\r\n        <div className=\"sticky bottom-0 z-10 bg-white border-t border-gray-200 sm:rounded-b-2xl\">\r\n          <div className=\"p-4 sm:p-6\">\r\n            <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3\">\r\n              {step === 1 ? (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={handleClose}\r\n                  className=\"w-full sm:w-auto h-12 text-base font-medium\"\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={handleBack}\r\n                    className=\"w-full sm:w-auto h-12 text-base font-medium\"\r\n                  >\r\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                    Back\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleSubmit}\r\n                    disabled={loading || !formData.clientId || !formData.deploymentDate || (!formData.assignToPool && !formData.departmentLocationId)}\r\n                    className=\"w-full sm:w-auto h-12 text-base font-medium bg-blue-600 hover:bg-blue-700 text-white\"\r\n                  >\r\n                    {loading ? (\r\n                      <div className=\"flex items-center\">\r\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                        {isTransferMode ? 'Transferring...' : 'Assigning...'}\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"flex items-center\">\r\n                        <Check className=\"h-4 w-4 mr-2\" />\r\n                        {formData.assignToPool ? 'Add to Pool' : isTransferMode ? 'Transfer Printer' : 'Assign Printer'}\r\n                      </div>\r\n                    )}\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","\r\nimport { useState } from \"react\";\r\nimport { Plus, UserPlus, Printer, X, Package, Building2 } from \"lucide-react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { AssignModal } from \"../AssignModal\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\n\r\ninterface AddButtonNavigationProps {\r\n  onAssignPrinter: () => void;\r\n  onAddPrinter: () => void;\r\n  onAddToInventory: () => void;\r\n  onAddCompanyPrinter?: () => void;\r\n}\r\n\r\nexport const AddButtonNavigation = ({ \r\n  onAssignPrinter, \r\n  onAddPrinter, \r\n  onAddToInventory, \r\n  onAddCompanyPrinter \r\n}: AddButtonNavigationProps) => {\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [showAssignModal, setShowAssignModal] = useState(false);\r\n\r\n  // Get clientId from URL params (if any)\r\n  const { clientId } = useParams<{ clientId?: string }>();\r\n  const location = useLocation();\r\n  const isClientPage = location.pathname.startsWith(\"/clients/\");\r\n\r\n  const handleAssignPrinter = () => {\r\n    setShowMenu(false);\r\n    setShowAssignModal(true);\r\n  };\r\n\r\n  const handleAddPrinter = () => {\r\n    setShowMenu(false);\r\n    onAddPrinter();\r\n  };\r\n\r\n  const handleAddToInventory = () => {\r\n    setShowMenu(false);\r\n    onAddToInventory();\r\n  };\r\n\r\n  const handleAddCompanyPrinter = () => {\r\n    setShowMenu(false);\r\n    onAddCompanyPrinter?.();\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative flex-shrink-0\">\r\n      {/* Menu positioned above the button */}\r\n      <AnimatePresence>\r\n        {showMenu && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20, scale: 0.95 }}\r\n            animate={{ opacity: 1, y: 0, scale: 1 }}\r\n            exit={{ opacity: 0, y: 20, scale: 0.95 }}\r\n            transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n            className=\"absolute bottom-full right-0 mb-2 z-50\"\r\n          >\r\n            <div className=\"bg-white rounded-2xl shadow-2xl border border-gray-100 p-3 sm:p-4 w-72 sm:w-80 max-w-[90vw]\">\r\n              {/* Header */}\r\n              <div className=\"flex items-center justify-between mb-3 sm:mb-4\">\r\n                <h3 className=\"text-base sm:text-lg font-semibold text-gray-900\">Add Options</h3>\r\n                <button\r\n                  onClick={() => setShowMenu(false)}\r\n                  className=\"p-1.5 rounded-full hover:bg-gray-100 transition-colors\"\r\n                  aria-label=\"Close menu\"\r\n                >\r\n                  <X className=\"h-4 w-4 text-gray-500\" />\r\n                </button>\r\n              </div>\r\n\r\n              {/* Menu Options */}\r\n              <div className=\"space-y-2\">\r\n                {/* Add Company Printer - Only show on client pages */}\r\n                {isClientPage && clientId && onAddCompanyPrinter && (\r\n                  <button\r\n                    onClick={handleAddCompanyPrinter}\r\n                    className=\"w-full flex items-center gap-2 sm:gap-3 p-2.5 sm:p-3 rounded-xl bg-purple-50 hover:bg-purple-100 border border-purple-200 transition-colors text-left\"\r\n                  >\r\n                    <div className=\"flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 bg-purple-100 rounded-full flex items-center justify-center\">\r\n                      <Building2 className=\"h-4 w-4 sm:h-5 sm:w-5 text-purple-600\" />\r\n                    </div>\r\n                    <div className=\"min-w-0 flex-1\">\r\n                      <h4 className=\"font-medium text-gray-900 text-sm sm:text-base\">Add Printer</h4>\r\n                      <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Add and assign printer to this company</p>\r\n                    </div>\r\n                  </button>\r\n                )}\r\n\r\n                <button\r\n                  onClick={handleAssignPrinter}\r\n                  className=\"w-full flex items-center gap-2 sm:gap-3 p-2.5 sm:p-3 rounded-xl bg-orange-50 hover:bg-orange-100 border border-orange-200 transition-colors text-left\"\r\n                >\r\n                  <div className=\"flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 bg-orange-100 rounded-full flex items-center justify-center\">\r\n                    <UserPlus className=\"h-4 w-4 sm:h-5 sm:w-5 text-orange-600\" />\r\n                  </div>\r\n                  <div className=\"min-w-0 flex-1\">\r\n                    <h4 className=\"font-medium text-gray-900 text-sm sm:text-base\">Assign Printer</h4>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Assign an existing printer to a client</p>\r\n                  </div>\r\n                </button>\r\n\r\n                {/* Only show these two options if NOT on a client page */}\r\n                {!isClientPage && (\r\n                  <>\r\n                    <button\r\n                      onClick={handleAddPrinter}\r\n                      className=\"w-full flex items-center gap-2 sm:gap-3 p-2.5 sm:p-3 rounded-xl bg-blue-50 hover:bg-blue-100 border border-blue-200 transition-colors text-left\"\r\n                    >\r\n                      <div className=\"flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                        <Printer className=\"h-4 w-4 sm:h-5 sm:w-5 text-blue-600\" />\r\n                      </div>\r\n                      <div className=\"min-w-0 flex-1\">\r\n                        <h4 className=\"font-medium text-gray-900 text-sm sm:text-base\">Add New Printer</h4>\r\n                        <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Add a new printer model to the catalog</p>\r\n                      </div>\r\n                    </button>\r\n\r\n                    <button\r\n                      onClick={handleAddToInventory}\r\n                      className=\"w-full flex items-center gap-2 sm:gap-3 p-2.5 sm:p-3 rounded-xl bg-green-50 hover:bg-green-100 border border-green-200 transition-colors text-left\"\r\n                    >\r\n                      <div className=\"flex-shrink-0 w-8 h-8 sm:w-10 sm:h-10 bg-green-100 rounded-full flex items-center justify-center\">\r\n                        <Package className=\"h-4 w-4 sm:h-5 sm:w-5 text-green-600\" />\r\n                      </div>\r\n                      <div className=\"min-w-0 flex-1\">\r\n                        <h4 className=\"font-medium text-gray-900 text-sm sm:text-base\">Add to Inventory</h4>\r\n                        <p className=\"text-xs sm:text-sm text-gray-600 truncate\">Add a physical printer unit to inventory</p>\r\n                      </div>\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* AssignModal for correct context */}\r\n      {showAssignModal && (\r\n        <AssignModal\r\n          isOpen={showAssignModal}\r\n          onClose={() => setShowAssignModal(false)}\r\n          onAssigned={() => setShowAssignModal(false)}\r\n          preSelectedClientId={isClientPage ? clientId : undefined}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["ArrowRightLeft","createLucideIcon","ArrowRight","Building","RefreshCw","Shield","SWITCH_NAME","createSwitchContext","createSwitchScope","createContextScope","SwitchProvider","useSwitchContext","Switch","React.forwardRef","props","forwardedRef","__scopeSwitch","name","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","form","switchProps","button","setButton","React.useState","composedRefs","useComposedRefs","node","hasConsumerStoppedPropagationRef","React.useRef","isFormControl","checked","setChecked","useControllableState","jsxs","jsx","Primitive","getState","composeEventHandlers","event","prevChecked","BubbleInput","THUMB_NAME","SwitchThumb","thumbProps","context","control","bubbles","inputProps","ref","usePrevious","controlSize","useSize","React.useEffect","input","inputProto","Root","Thumb","className","SwitchPrimitives.Root","cn","SwitchPrimitives.Thumb","assetService","data","error","supabase","printer","id","updates","assignment","checkError","disableError","historyError","maintenanceError","statusError","usageError","deleteError","enableError","triggerError","clientId","assignmentId","departmentLocationId","query","printerId","schedule","entry","history","document","byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","_a","ADMIN_DASHBOARD_TABS","ERROR_MESSAGES","AddPrinterModal","isOpen","onClose","onPrinterAdded","toast","useToast","isLoading","setIsLoading","useState","colorType","setColorType","imageFile","setImageFile","imagePreview","setImagePreview","errorMsg","setErrorMsg","showCustomManufacturer","setShowCustomManufacturer","customManufacturer","setCustomManufacturer","showCustomSeries","setShowCustomSeries","customSeries","setCustomSeries","seriesOptions","setSeriesOptions","manufacturerOptions","paperSizes","formData","setFormData","printerName","parts","selectedPaperSizes","size","isMultifunction","series","useEffect","prev","handlePaperSizeChange","paperSize","updatedSizes","sizesString","handleInputChange","fetchSeriesOptions","manufacturer","printerService","s","field","handleManufacturerChange","handleCustomManufacturerChange","handleSeriesChange","handleCustomSeriesChange","handleColorTypeChange","type","handleImageChange","e","file","previewUrl","uploadImageToStorage","fileExt","fileName","uuidv4","urlData","handleRemoveImage","handleSubmit","_b","finalImageUrl","uploadError","printerData","createdPrinter","errorMessage","errorTitle","_c","_d","_e","errorText","_f","_g","_h","_i","_j","handleClose","X","Label","Upload","Input","Button","Check","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","Plus","Fragment","Checkbox","Save","_DataService","__publicField","rawAssignments","normalized","filter","cached","printers","assignments","clients","departmentLocations","groupedAssigned","acc","group","groupedAvailable","currentTab","preloadOrder","tab","DataService","dataService","AssignModal","onAssigned","preSelectedClientId","location","useLocation","isClientPage","currentClientId","queryClient","useQueryClient","step","setStep","selectedAssignment","setSelectedAssignment","searchQuery","setSearchQuery","setClients","departmentLocationOptions","setDepartmentLocationOptions","isTransferMode","setIsTransferMode","showOtherClients","setShowOtherClients","loading","setLoading","deptsLoading","setDeptsLoading","userProfile","useAuth","printerAssignments","assignmentsLoading","useQuery","clientService","React","today","filteredAssignments","groupedAssignments","groups","clientKey","handleAssignmentSelect","updateData","handleBack","getStatusBadge","status","hasLocation","Badge","getLocationInfo","Printer","Settings","Search","Package","CustomLoading","clientName","Users","Card","CardContent","CompatibleProducts","client","AlertCircle","opt","Calendar","DollarSign","Textarea","ArrowLeft","AddButtonNavigation","onAssignPrinter","onAddPrinter","onAddToInventory","onAddCompanyPrinter","showMenu","setShowMenu","showAssignModal","setShowAssignModal","useParams","handleAssignPrinter","handleAddPrinter","handleAddToInventory","handleAddCompanyPrinter","AnimatePresence","motion","Building2","UserPlus"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,8,9,10,11]}