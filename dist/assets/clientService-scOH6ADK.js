import{s as n,r as g,u as y}from"./index-FgfazPn4.js";class E{async getProducts(){const{data:r,error:e}=await n.from("products").select("*").order("name");if(e)throw console.error("Error fetching products:",e),e;return r||[]}async getProductById(r){const{data:e,error:t}=await n.from("products").select("*").eq("id",r).single();if(t)throw console.error("Error fetching product:",t),t;return e}async getProductsByPrinter(r){const{data:e,error:t}=await n.from("product_printers").select(`
        product:products(*)
      `).eq("printer_id",r).order("product(name)",{ascending:!0}).order("product(color)",{ascending:!0});if(t)throw console.error("Error fetching products by printer:",t),t;return(e==null?void 0:e.map(s=>s.product).filter(Boolean))||[]}async getProductWithSuppliers(r){const{data:e,error:t}=await n.from("products").select("*").eq("id",r).single();if(t)throw console.error("Error fetching product:",t),t;if(!e)return null;const{data:s,error:i}=await n.from("product_suppliers").select(`
        *,
        supplier:suppliers(*),
        priceHistory:price_history(*)
      `).eq("product_id",r);if(i)throw console.error("Error fetching product suppliers:",i),i;const{data:c,error:a}=await n.from("product_printers").select(`
        *,
        printer:printers(*)
      `).eq("product_id",r);if(a)throw console.error("Error fetching product printers:",a),a;return{...e,suppliers:s||[],printers:(c||[]).map(l=>l.printer).filter(Boolean)}}async getProductWithClients(r){const{data:e,error:t}=await n.from("products").select("*").eq("id",r).single();if(t)throw console.error("Error fetching product:",t),t;if(!e)return null;const{data:s,error:i}=await n.from("product_clients").select(`
        *,
        client:clients(*),
        priceHistory:client_price_history(*)
      `).eq("product_id",r);if(i)throw console.error("Error fetching product clients:",i),i;const{data:c,error:a}=await n.from("product_printers").select(`
        *,
        printer:printers(*)
      `).eq("product_id",r);if(a)throw console.error("Error fetching product printers:",a),a;return{...e,clients:s||[],printers:(c||[]).map(l=>l.printer).filter(Boolean)}}async createProduct(r){const{data:e,error:t}=await n.from("products").insert([r]).select().single();if(t)throw console.error("Error creating product:",t),t;return e}async updateProduct(r,e){console.log("productService.updateProduct called with:",{id:r,productData:e});const{data:t,error:s}=await n.from("products").update(e).eq("id",r).select().single();if(console.log("Supabase response:",{data:t,error:s}),s)throw console.error("Error updating product:",s),s;return t}async deleteProduct(r,e){const{data:t,error:s}=await n.from("transaction_records").select("id").eq("product_id",r);if(s)throw console.error("Error checking related transaction records:",s),s;if(t&&t.length>0){if(!e)throw new Error("Product is still referenced by transaction_records. Please reassign or provide a replacementProductId.");const{error:c}=await n.from("transaction_records").update({product_id:e}).eq("product_id",r);if(c)throw console.error("Error reassigning transaction records:",c),c}const{error:i}=await n.from("products").delete().eq("id",r);if(i)throw console.error("Error deleting product:",i),i}async mergeProducts(r,e,t){const s=await this.getProductById(r);if(!s)throw console.error("Could not fetch primary product"),new Error("Could not fetch primary product");let i={alias:t,color:s.color,description:s.description};for(const a of e){const l=await this.getProductById(a);if(!l){console.warn(`Could not fetch product ${a}, skipping.`);continue}!i.color&&l.color&&(i.color=l.color),!i.description&&l.description&&(i.description=l.description)}await this.updateProduct(r,i);for(const a of e){const{error:l}=await n.from("transaction_records").update({product_id:r}).eq("product_id",a);l&&console.error(`Error re-assigning transaction records from ${a}:`,l);const u=[{name:"product_printers",conflictColumn:"printer_id"},{name:"product_suppliers",conflictColumn:"supplier_id"},{name:"product_clients",conflictColumn:"client_id"}];for(const p of u){const{data:m,error:d}=await n.from(p.name).select("*").eq("product_id",a);if(d){console.error(`Error fetching related items from ${p.name} for product ${a}:`,d);continue}if(m&&m.length>0){const f=m.map(_=>{const{id:P,product_id:C,...h}=_;return{...h,product_id:r}}),{error:w}=await n.from(p.name).upsert(f,{onConflict:`product_id, ${p.conflictColumn}`});w&&console.error(`Error upserting relations into ${p.name}:`,w)}}}const{error:c}=await n.from("products").delete().in("id",e);if(c)throw console.error("Error deleting merged products:",c),c}async addSupplierToProduct(r,e,t){let s;const{data:i}=await n.from("suppliers").select("id").eq("name",e.name).single();if(i)s=i.id;else{const{data:l,error:u}=await n.from("suppliers").insert([e]).select().single();if(u)throw console.error("Error creating supplier:",u),u;s=l.id}const{data:c,error:a}=await n.from("product_suppliers").insert([{product_id:r,supplier_id:s,current_price:t}]).select(`
        *,
        supplier:suppliers(*)
      `).single();if(a)throw console.error("Error adding supplier to product:",a),a;return c}async updateSupplierPrice(r,e,t){const{data:s,error:i}=await n.from("product_suppliers").update({current_price:e}).eq("id",r).select(`
        *,
        supplier:suppliers(*)
      `).single();if(i)throw console.error("Error updating supplier price:",i),i;return t&&await n.from("price_history").insert([{product_supplier_id:r,price:e,note:t}]),s}async removeSupplierFromProduct(r){const{error:e}=await n.from("product_suppliers").delete().eq("id",r);if(e)throw console.error("Error removing supplier from product:",e),e}async getProductsByCategory(r){const{data:e,error:t}=await n.from("products").select("*").eq("category",r).order("name");if(t)throw console.error("Error fetching products by category:",t),t;return e||[]}async searchProducts(r){const{data:e,error:t}=await n.from("products").select("*").or(`name.ilike.%${r}%,sku.ilike.%${r}%,description.ilike.%${r}%`).order("name");if(t)throw console.error("Error searching products:",t),t;return e||[]}async getSupplierPriceHistory(r){const{data:e,error:t}=await n.from("price_history").select("*").eq("product_supplier_id",r).order("timestamp",{ascending:!1});if(t)throw console.error("Error fetching price history:",t),t;return e||[]}async addClientToProduct(r,e,t,s){let i;const{data:c}=await n.from("clients").select("id").eq("name",e.name).single();if(c)i=c.id;else{const{data:u,error:p}=await n.from("clients").insert([e]).select().single();if(p)throw console.error("Error creating client:",p),p;i=u.id}const{data:a,error:l}=await n.from("product_clients").insert([{product_id:r,client_id:i,quoted_price:t,margin_percentage:s}]).select(`
        *,
        client:clients(*)
      `).single();if(l)throw console.error("Error adding client to product:",l),l;return a}}const q=new E,S=Object.freeze(Object.defineProperty({__proto__:null,productService:q},Symbol.toStringTag,{value:"Module"})),b={async getPrinters(){const{data:o,error:r}=await n.from("printers").select("*").eq("status","active").order("name");if(r)throw r;return o||[]},async getAssignedPrinters(){const{data:o,error:r}=await n.from("printers").select(`
        *,
        printer_assignments!inner(
          id,
          client_id,
          status,
          serial_number,
          department_location:departments_location(
            name,
            department:departments (
                name
            )
          ),
          clients (
            id,
            name
          )
        )
      `).eq("status","active").eq("printer_assignments.status","active").order("name");if(r)throw console.error("Error fetching assigned printers:",r),r;return o||[]},async searchPrinters(o){const{data:r,error:e}=await n.from("printers").select("*").eq("status","active").ilike("name",`%${o}%`).order("name");if(e)throw e;return r||[]},async searchAssignedPrinters(o){const{data:r,error:e}=await n.from("printers").select(`
        *,
        printer_assignments!inner(
          id,
          client_id,
          status,
          serial_number,
          clients(id, name)
        )
      `).eq("status","active").eq("printer_assignments.status","active").ilike("name",`%${o}%`).order("name");if(e)throw console.error("Error searching assigned printers:",e),e;return r||[]},async createPrinter(o){const{data:r,error:e}=await n.from("printers").insert(o).select().single();if(e)throw console.error("Error creating printer:",e),e;return r},async updatePrinter(o,r){const{data:e,error:t}=await n.from("printers").update(r).eq("id",o).select().single();if(t)throw console.error("Error updating printer:",t),t;return e},async findOrCreatePrinter(o){const{data:r}=await n.from("printers").select("*").eq("name",o.trim()).eq("status","active").single();return r||this.createPrinter({name:o.trim()})},async addPrintersToProduct(o,r){if(await n.from("product_printers").delete().eq("product_id",o),r.length===0)return;const e=[];for(const i of r){const c=await this.findOrCreatePrinter(i);e.push(c.id)}const t=e.map(i=>({product_id:o,printer_id:i})),{error:s}=await n.from("product_printers").insert(t);if(s)throw console.error("Error adding printers to product:",s),s},async updatePrinterProducts(o,r){if(await n.from("product_printers").delete().eq("printer_id",o),r.length===0)return;const e=r.map(s=>({printer_id:o,product_id:s})),{error:t}=await n.from("product_printers").insert(e);if(t)throw console.error("Error updating printer products:",t),t},async getProductPrinters(o){const{data:r,error:e}=await n.from("product_printers").select(`
        printer:printers(*)
      `).eq("product_id",o);if(e)throw console.error("Error fetching product printers:",e),e;return(r==null?void 0:r.map(t=>t.printer).filter(Boolean))||[]},async deletePrinter(o,r,e){try{const{error:t}=await n.from("printers").update({status:"deleted",is_available:!1,updated_at:new Date().toISOString()}).eq("id",o);if(t)throw console.error("Error updating printer status:",t),t;console.log(`Printer ${o} soft deleted successfully`)}catch(t){throw console.error("Error in soft delete printer:",t),t}},async softDeletePrinter(o,r,e){const{error:t}=await n.from("printers").update({is_available:!1}).eq("id",o);if(t)throw console.error("Error soft deleting printer:",t),t},async getAvailablePrinters(){const{data:o,error:r}=await n.from("printers").select("*").eq("is_available",!0).eq("status","active").order("name");if(r)throw console.error("Error fetching available printers:",r),r;return o||[]},async mergePrinters(o,r){if(r.length===0)return;const{data:e,error:t}=await n.from("printers").select("*").in("id",[o,...r]);if(t)throw t;const s=e.find(a=>a.id===o),i=e.filter(a=>r.includes(a.id)),c=new Set;for(const a of i)a.name&&c.add(a.name),a.model&&c.add(a.model),a.aliases&&a.aliases.split(",").forEach(l=>c.add(l.trim()));s.aliases&&s.aliases.split(",").forEach(a=>c.add(a.trim())),c.delete(s.name),s.model&&c.delete(s.model),await n.from("printers").update({aliases:Array.from(c).join(", ")}).eq("id",o),await n.from("printer_assignments").update({printer_id:o}).in("printer_id",r),await n.from("product_printers").update({printer_id:o}).in("printer_id",r),await n.from("printers").delete().in("id",r)},async getProductsByPrinterName(o){try{const{data:r,error:e}=await n.from("printers").select("id").or(`name.ilike.%${o}%,aliases.ilike.%${o}%`);if(e)throw console.error("Error finding printer:",e),e;if(!r||r.length===0)return[];const t=r.map(a=>a.id),{data:s,error:i}=await n.from("product_printers").select(`
          product:products(
            id,
            name,
            sku,
            category,
            description,
            color,
            alias,
            created_at,
            updated_at
          )
        `).in("printer_id",t);if(i)throw console.error("Error finding linked products:",i),i;return(s==null?void 0:s.map(a=>a.product).filter(Boolean))||[]}catch(r){throw console.error("Error getting products by printer name:",r),r}},async getPrintersByDepartmentLocation(o){const{data:r,error:e}=await n.from("printer_assignments").select("*, printer:printers(*)").eq("department_location_id",o).eq("status","active");if(e)throw console.error("Error fetching printers for department location:",e),e;return r||[]},async getPrintersByClient(o){const{data:r,error:e}=await n.from("printer_assignments").select("*, printer:printers(*), location:departments_location(*)").eq("client_id",o).eq("status","active");if(e)throw console.error("Error fetching printers for client:",e),e;return r||[]},async getProductsByClient(o){const{data:r,error:e}=await n.from("product_clients").select("*, product:products(*, product_printers(printer:printers(*)))").eq("client_id",o);if(e)throw console.error("Error fetching products for client:",e),e;return r||[]},async unassignPrinter(o){try{const{error:r}=await n.from("printer_assignments").update({status:"available",client_id:null,department_location_id:null,department:null,location:null,is_unassigned:!0,reason_for_change:"Unassigned from client - made available",updated_at:new Date().toISOString()}).eq("id",o);if(r)throw console.error("Error updating assignment status:",r),new Error(r.message);return console.log("Printer successfully unassigned and made available"),!0}catch(r){throw console.error("Error in unassignPrinter:",r),r}},async unassignFromLocation(o){var r;try{const{data:e,error:t}=await n.from("printer_assignments").select("departments_location(department_id), id").eq("id",o).single();if(t)throw t;let s=null;if((r=e==null?void 0:e.departments_location)!=null&&r.department_id){const{data:c,error:a}=await n.from("departments").select("name").eq("id",e.departments_location.department_id).single();if(a)throw a;s=(c==null?void 0:c.name)||null}const{error:i}=await n.from("printer_assignments").update({department_location_id:null,location:null,department:s,reason_for_change:"Unassigned from location - remains with department",updated_at:new Date().toISOString()}).eq("id",o);if(i)throw console.error("Error unassigning from location:",i),new Error(i.message);return console.log("Printer successfully unassigned from location"),!0}catch(e){throw console.error("Error in unassignFromLocation:",e),e}},async unassignFromDepartment(o){try{const{error:r}=await n.from("printer_assignments").update({department_location_id:null,department:null,location:null,reason_for_change:"Unassigned from department - remains with client",updated_at:new Date().toISOString()}).eq("id",o);if(r)throw console.error("Error unassigning from department:",r),new Error(r.message);return console.log("Printer successfully unassigned from department"),!0}catch(r){throw console.error("Error in unassignFromDepartment:",r),r}},async unassignFromClient(o){return this.unassignPrinter(o)},async createPrinterAssignment(o){const{data:r,error:e}=await n.from("printer_assignments").insert(o).select().single();if(e)throw console.error("Error creating printer assignment:",e),e;return r},async getUniqueSeries(o){try{let r=n.from("printers").select("series").not("series","is",null).neq("series","");o&&o.trim()!==""&&(r=r.eq("manufacturer",o));const{data:e,error:t}=await r;if(t)throw t;return[...new Set(e.map(i=>i.series).filter(i=>i&&i.trim()!==""))].sort()}catch(r){throw console.error("Error fetching unique series:",r),r}}},B=()=>{const[o,r]=g.useState([]),[e,t]=g.useState(!1),[s,i]=g.useState(null),{toast:c}=y(),a=async()=>{t(!0),i(null);try{const{data:d,error:f}=await n.from("clients").select("*").order("name");!f&&d?r(d):(i("Failed to fetch clients"),c({title:"Error",description:"Failed to fetch clients",variant:"destructive"}))}catch(d){i(d instanceof Error?d.message:"Failed to fetch clients"),c({title:"Error",description:"Failed to fetch clients",variant:"destructive"})}finally{t(!1)}},l=async()=>{c({title:"Not Implemented",description:"Client creation will be implemented in a future update",variant:"default"})},u=async()=>{c({title:"Not Implemented",description:"Client updates will be implemented in a future update",variant:"default"})},p=async()=>{c({title:"Not Implemented",description:"Client archiving will be implemented in a future update",variant:"default"})},m=async()=>{c({title:"Not Implemented",description:"Client restoration will be implemented in a future update",variant:"default"})};return g.useEffect(()=>{a()},[]),{clients:o,loading:e,error:s,refetch:a,loadClients:a,categories:[],createClient:l,updateClient:u,archiveClient:p,restoreClient:m}},$={async getClients(){const{data:o,error:r}=await n.from("clients").select(`
        *,
        printers: printer_assignments (
          *,
          printer:printers (
            *,
            product_printers(product_id)
          )
        )
      `).order("name");if(r)throw r;return o||[]},async findClientByEmail(o){if(!o)return null;const{data:r,error:e}=await n.from("clients").select("*").eq("contact_email",o.toLowerCase().trim()).single();if(e){if(e.code==="PGRST116")return null;throw e}return r},async getClientById(o){if(!o)return null;const{data:r,error:e}=await n.from("clients").select("*").eq("id",o).single();if(e){if(e.code==="PGRST116")return null;throw e}return r},async createClient(o){const{data:r,error:e}=await n.from("clients").insert(o).select().single();if(e)throw e;return r},async updateClient(o,r){const{data:e,error:t}=await n.from("clients").update(r).eq("id",o).select().single();if(t)throw t;return e},async deleteClient(o){const{error:r}=await n.from("clients").delete().eq("id",o);if(r)throw r},async addClientToProduct(o,r,e,t){let s;const{data:i}=await n.from("clients").select("*").eq("name",r.name);i&&i.length>0?s=i[0]:s=await this.createClient(r);const{data:c,error:a}=await n.from("product_clients").insert({product_id:o,client_id:s.id,quoted_price:e,margin_percentage:t||0}).select("*, client:clients(*)").single();if(a)throw a;return c},async updateClientQuote(o,r,e,t){const{data:s,error:i}=await n.from("product_clients").update({quoted_price:r,margin_percentage:e}).eq("id",o).select("*, client:clients(*)").single();if(i)throw i;return s},async removeClientFromProduct(o){const{error:r}=await n.from("product_clients").delete().eq("id",o);if(r)throw r},async getProductClients(o){const{data:r,error:e}=await n.from("product_clients").select(`
        *,
        client:clients(*),
        priceHistory:client_price_history(*)
      `).eq("product_id",o).order("created_at");if(e)throw e;return r||[]},async getClientPriceHistory(o){const{data:r,error:e}=await n.from("client_price_history").select("*").eq("product_client_id",o).order("timestamp",{ascending:!1});if(e)throw e;return r||[]},async mergeClients(o,r){if(console.log("Starting client merge process...",{clientIds:o,mergedClientData:r}),o.length<2)throw new Error("At least 2 clients are required for merging");const e=await this.createClient(r);console.log("Created merged client:",e);const{data:t,error:s}=await n.from("product_clients").select("*").in("client_id",o);if(s)throw console.error("Error fetching product clients:",s),s;console.log("Found product clients to merge:",t);const i=new Map;t==null||t.forEach(a=>{i.has(a.product_id)||i.set(a.product_id,[]),i.get(a.product_id).push(a)});for(const[a,l]of i)if(console.log(`Processing product ${a} with ${l.length} client relations`),l.length===1){const u=l[0],{error:p}=await n.from("product_clients").update({client_id:e.id}).eq("id",u.id);if(p)throw console.error("Error updating product client relation:",p),p}else{const u=l.reduce((d,f)=>f.quoted_price>d.quoted_price||f.quoted_price===d.quoted_price&&new Date(f.updated_at)>new Date(d.updated_at)?f:d),{error:p}=await n.from("product_clients").update({client_id:e.id}).eq("id",u.id);if(p)throw console.error("Error updating primary relation:",p),p;const m=l.filter(d=>d.id!==u.id).map(d=>d.id);if(m.length>0){const{error:d}=await n.from("product_clients").delete().in("id",m);if(d)throw console.error("Error deleting duplicate relations:",d),d}}const{error:c}=await n.from("clients").delete().in("id",o);if(c)throw console.error("Error deleting original clients:",c),c;return console.log("Client merge completed successfully"),e},async getDepartmentsByClient(o){const{data:r,error:e}=await n.from("departments").select("id, name, locations:departments_location(id, name)").eq("client_id",o).order("name");if(e)throw e;if(!r)return[];const t=[];for(const s of r)for(const i of s.locations||[])t.push({id:i.id,name:`${s.name} - ${i.name}`,location:i.name});return t}};export{b as a,S as b,$ as c,q as p,B as u};
//# sourceMappingURL=clientService-scOH6ADK.js.map
