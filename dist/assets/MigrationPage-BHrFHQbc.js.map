{"version":3,"mappings":";4gBAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,EAASC,EAAiB,SAAU,CACxC,CAAC,OAAQ,CAAE,MAAO,KAAM,OAAQ,IAAK,EAAG,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,SAAU,EACtF,CAAC,OAAQ,CAAE,MAAO,KAAM,OAAQ,IAAK,EAAG,IAAK,EAAG,KAAM,GAAI,IAAK,GAAI,IAAK,IAAK,SAAU,EACvF,CAAC,OAAQ,CAAE,GAAI,IAAK,GAAI,OAAQ,GAAI,IAAK,GAAI,IAAK,IAAK,QAAQ,CAAE,EACjE,CAAC,OAAQ,CAAE,GAAI,IAAK,GAAI,OAAQ,GAAI,KAAM,GAAI,KAAM,IAAK,QAAQ,CAAE,CACrE,CAAC,ECFKC,EAAU,CACd,QAAS,CACP,KAAM,iBACN,IAAK,2CACL,SAAU,mNACV,OAAQ,QACV,EACA,IAAK,CACH,KAAM,kCACN,IAAK,2CACL,SAAU,mNACV,OAAQ,OACV,CACF,EASaC,EAAmB,IAAM,CACpC,KAAM,CAACC,EAAcC,CAAe,EAAIC,WAA4B,SAAS,EACvE,CAACC,EAAiBC,CAAkB,EAAIF,WAA6D,WAAW,EAChH,CAACG,EAAaC,CAAc,EAAIJ,EAAA,SAAuB,CAAE,GACzD,CAACK,EAAgBC,CAAiB,EAAIN,WAAS,EAAK,EAGpDO,EAAiB,MAAOC,GAAsD,CAC9E,IACF,KAAM,CAAE,aAAAC,CAAA,EAAiB,MAAMC,EAAA,6BAAAD,GAAA,aAAO,qBAAuB,OAAAE,KAAA,wBAAAF,CAAA,2BACvDG,EAAShB,EAAQY,CAAS,EAC1BK,EAAaJ,EAAaG,EAAO,IAAKA,EAAO,QAAQ,EAErD,CAAE,KAAAE,EAAM,MAAAC,CAAA,EAAU,MAAMF,EAAW,KAAK,SAAS,EAAE,OAAO,QAAS,CAAE,MAAO,QAAS,KAAM,GAAM,EAEvG,GAAIE,EAAa,MAAAA,EAEV,OACL,KAAM,GAAGH,EAAO,IAAI,cACpB,OAAQ,UACR,QAAS,4BAA2BE,GAAA,YAAAA,EAAM,SAAU,CAAC,yBAEhDC,EAAO,CACP,OACL,KAAM,GAAGnB,EAAQY,CAAS,EAAE,IAAI,cAChC,OAAQ,QACR,QAAS,sBAAsBO,aAAiB,MAAQA,EAAM,QAAU,eAAe,GAE3F,GAIIC,EAAgB,SAAiC,CACjD,IACF,KAAM,CAAE,KAAAF,EAAM,MAAAC,GAAU,MAAME,EAAS,IAAI,sBAAsB,EAEjE,GAAIF,EAAa,MAAAA,EAEV,OACL,KAAM,qBACN,OAAQ,UACR,QAAS,kCACT,QAASD,CAAA,QAEJC,EAAO,CACP,OACL,KAAM,qBACN,OAAQ,QACR,QAAS,yBAAyBA,aAAiB,MAAQA,EAAM,QAAU,eAAe,GAE9F,GAIIG,EAAkB,SAAiC,CACnD,IAEF,MAAMC,EAAQ,CACZF,EAAS,KAAK,SAAS,EAAE,OAAO,IAAI,EAAE,MAAM,CAAC,EAC7CA,EAAS,KAAK,aAAa,EAAE,OAAO,IAAI,EAAE,MAAM,CAAC,EACjDA,EAAS,KAAK,UAAU,EAAE,OAAO,IAAI,EAAE,MAAM,CAAC,EAC9CA,EAAS,KAAK,UAAU,EAAE,OAAO,IAAI,EAAE,MAAM,CAAC,GAG1CG,EAAU,MAAM,QAAQ,WAAWD,CAAK,EACxCE,EAAWD,EAAQ,OAAYE,KAAE,SAAW,UAAU,EAExD,GAAAD,EAAS,OAAS,EACd,UAAI,MAAM,wBAAwBA,EAAS,MAAM,IAAID,EAAQ,MAAM,eAAe,EAGnF,OACL,KAAM,eACN,OAAQ,UACR,QAAS,oDAEJL,EAAO,CACP,OACL,KAAM,eACN,OAAQ,QACR,QAAS,oBAAoBA,aAAiB,MAAQA,EAAM,QAAU,eAAe,GAEzF,GAIIQ,EAAoB,SAAiC,CACrD,IACF,KAAM,CAAE,KAAMC,EAAS,MAAOC,GAAiB,MAAMR,EAClD,KAAK,SAAS,EACd,OAAO,2CAA2C,EAClD,MAAM,CAAC,EAEV,GAAIQ,EAAoB,MAAAA,EAGb,UAAAC,KAAUF,GAAW,GAAI,CAC5B,MAAE,MAAOG,GAAc,MAAMV,EAChC,KAAK,aAAa,EAClB,OAAO,IAAK,CAAE,MAAO,QAAS,KAAM,EAAM,GAC1C,GAAG,YAAaS,EAAO,EAAE,EAEtB,CAAE,MAAOE,CAAiB,QAAMX,EACnC,KAAK,qBAAqB,EAC1B,OAAO,IAAK,CAAE,MAAO,QAAS,KAAM,EAAK,CAAC,EAC1C,GAAG,YAAaS,EAAO,EAAE,EACzB,GAAG,SAAU,QAAQ,EAExB,GAAIA,EAAO,mBAAqBC,GAAaD,EAAO,gBAAkBE,EACpE,MAAM,IAAI,MAAM,mCAAmCF,EAAO,IAAI,EAAE,CAEpE,CAEO,OACL,KAAM,iBACN,OAAQ,UACR,QAAS,aAAYF,GAAA,YAAAA,EAAS,SAAU,CAAC,wCAEpCT,EAAO,CACP,OACL,KAAM,iBACN,OAAQ,QACR,QAAS,0BAA0BA,aAAiB,MAAQA,EAAM,QAAU,eAAe,GAE/F,GAIIc,EAAoB,SAAY,CACpCvB,EAAkB,EAAI,EACtBF,EAAe,CAAE,GAEjB,MAAMe,EAAQ,CACZ,IAAMZ,EAAe,SAAS,EAC9B,IAAMA,EAAe,KAAK,EAC1BS,EACAE,EACAK,CAAA,EAGIH,EAAwB,GAE9B,UAAWU,KAAQX,EAAO,CAClB,MAAAY,EAAS,MAAMD,IACrBV,EAAQ,KAAKW,CAAM,EACJ3B,EAAA,CAAC,GAAGgB,CAAO,CAAC,EAG3B,MAAM,IAAI,QAAQY,GAAW,WAAWA,EAAS,GAAG,CAAC,CACvD,CAEA1B,EAAkB,EAAK,EAEvB,MAAM2B,EAAcb,EAAQ,OAAYE,KAAE,SAAW,OAAO,EACxDW,EAAY,SAAW,EACnBC,EAAA,CACJ,MAAO,gCACP,YAAa,qDACd,EAEKA,EAAA,CACJ,MAAO,4BACP,YAAa,GAAGD,EAAY,MAAM,8CAClC,QAAS,cACV,CACH,EAIIE,EAAe,MAAO3B,GAAiC,CACvD,IACFT,EAAgBS,CAAS,EACnB0B,EAAA,CACJ,MAAO,kBACP,YAAa,aAAatC,EAAQY,CAAS,EAAE,IAAI,GAClD,QACMO,EAAO,CACRmB,EAAA,CACJ,MAAO,uBACP,YAAanB,aAAiB,MAAQA,EAAM,QAAU,gBACtD,QAAS,cACV,CACH,GAGIqB,EAAiBC,GAAmB,CACxC,OAAQA,EAAQ,CACd,IAAK,UAAkB,OAAAC,EAAA,IAACC,EAAY,WAAU,wBAAyB,GACvE,IAAK,QAAgB,OAAAD,EAAA,IAACE,EAAQ,WAAU,sBAAuB,GAC/D,IAAK,UAAkB,OAAAF,EAAA,IAACG,EAAM,WAAU,yBAA0B,GAClE,QAAgB,OAAAH,EAAA,IAACG,EAAM,WAAU,uBAAwB,EAC3D,GAGIC,EAAkBL,GAAmB,CACzC,MAAMM,EAAW,CACf,OAAU,UACV,MAAS,YACT,MAAS,cACT,QAAW,WAGb,aAAQC,EAAM,SAASD,EAASN,CAA+B,GAAK,UAAY,SAAOA,CAAA,IAIvF,OAAAQ,EAAA,KAAC,MAAI,WAAU,YACb,UAACP,EAAA,IAAAQ,EAAA,CACC,gBAACC,EACC,WAACF,OAAAG,EAAA,CAAU,UAAU,0BACnB,UAACV,MAAAW,EAAA,CAAS,UAAU,SAAU,GAAE,oCAElC,EACAX,MAACY,GAAgB,SAEjB,0FACF,CACF,GAECL,EAAA,KAAAM,EAAA,CAAK,aAAa,SAAS,UAAU,YACpC,UAAAN,OAACO,EACC,WAACd,EAAA,IAAAe,EAAA,CAAY,MAAM,SAAS,SAAgB,qBAC3Cf,EAAA,IAAAe,EAAA,CAAY,MAAM,UAAU,SAAgB,qBAC5Cf,EAAA,IAAAe,EAAA,CAAY,MAAM,iBAAiB,SAAc,oBACpD,EAECR,EAAA,KAAAS,EAAA,CAAY,MAAM,SAAS,UAAU,YACpC,UAAChB,MAAA,OAAI,UAAU,wCACZ,gBAAO,QAAQ1C,CAAO,EAAE,IAAI,CAAC,CAAC2D,EAAK3C,CAAM,WACvCkC,EAAe,WAAW,GAAGhD,IAAiByD,EAAM,uBAAyB,EAAE,GAC9E,UAAAjB,MAACS,EACC,UAAAF,OAACG,EAAU,WAAU,oCACnB,UAACH,OAAA,QAAK,UAAU,0BACd,UAACP,MAAA5C,EAAA,CAAO,UAAU,SAAU,GAC3BkB,EAAO,MACV,EACC8B,EAAe9B,EAAO,MAAM,GAC/B,CACF,GACC0B,MAAAkB,EAAA,CACC,SAACX,OAAA,OAAI,UAAU,YACb,UAACA,OAAA,KAAE,UAAU,gCAAgC,kBAAMjC,EAAO,KAAI,EAC9DiC,OAAC,IAAE,WAAU,gCAAgC,kBACrCjC,EAAO,SAAS,UAAU,EAAG,EAAE,EAAE,OACzC,EACCd,IAAiByD,GAChBjB,MAACM,EAAM,SAAQ,UAAU,SAAgB,sBAE7C,CACF,KApBSW,CAqBX,CACD,EACH,SAECE,EACC,WAACnB,MAAAoB,EAAA,CAAc,UAAU,SAAU,UAClCC,EACC,WAAAd,OAAC,SAAO,gCAAmB5C,EAAgB,YAAY,GAAE,QACxD,KAAG,IAAE,sIAGR,GACF,GACF,QAECqD,EAAY,OAAM,UAAU,UAAU,YACrC,gBAACR,EACC,WAAAD,OAACE,EACC,WAAAT,MAACU,GAAU,SAA0B,+BACrCV,MAACY,GAAgB,SAEjB,yEACF,EACAL,OAACW,EAAY,WAAU,YACrB,UAAAlB,EAAA,IAACsB,EAAA,CACC,QAAS/B,EACT,SAAUxB,EACV,UAAU,SAET,WAAiB,mBAAqB,sBACzC,EAECF,EAAY,OAAS,GACnB0C,EAAA,YAAI,UAAU,YACb,UAACP,EAAA,UAAG,UAAU,gBAAgB,SAAa,kBAC1CnC,EAAY,IAAI,CAAC4B,EAAQ8B,IACvBhB,OAAA,OAAgB,UAAU,uDACzB,UAACA,OAAA,OAAI,UAAU,0BACZ,UAAAT,EAAcL,EAAO,MAAM,EAC3BO,EAAA,YAAK,UAAU,cAAe,WAAO,KAAK,GAC7C,EACAO,OAAC,MAAI,WAAU,aACb,UAAAP,EAAA,IAAC,IAAE,WAAU,gCAAiC,SAAAP,EAAO,QAAQ,EAC5DA,EAAO,SACLc,OAAA,KAAE,UAAU,wBACV,UAAK,eAAUd,EAAO,QAAS,KAAM,CAAC,EAAE,UAAU,EAAG,GAAG,EAAE,OAC7D,GAEJ,IAZQ8B,CAaV,CACD,GACH,GAEJ,GACF,CACF,SAECP,EAAY,OAAM,iBAAiB,UAAU,YAC5C,gBAACR,EACC,WAAAD,OAACE,EACC,WAAAT,MAACU,GAAU,SAAiB,sBAC5BV,MAACY,GAAgB,SAEjB,6DACF,EACAL,OAACW,EAAY,WAAU,YACrB,UAACX,OAAA,OAAI,UAAU,wCACb,UAAAA,EAAA,KAACe,EAAA,CACC,QAAS9D,IAAiB,UAAY,UAAY,UAClD,QAAS,IAAMqC,EAAa,SAAS,EACrC,UAAU,2BAEV,UAACG,MAAA5C,EAAA,CAAO,UAAU,SAAU,GAAE,qBAE7B4C,EAAA,YAAK,UAAU,qBAAqB,SAA0B,gCACjE,EAEAO,EAAA,KAACe,EAAA,CACC,QAAS9D,IAAiB,MAAQ,UAAY,UAC9C,QAAS,IAAMqC,EAAa,KAAK,EACjC,UAAU,2BAEV,UAACG,MAAAW,EAAA,CAAS,UAAU,SAAU,GAAE,iBAE/BX,EAAA,YAAK,UAAU,qBAAqB,SAAkB,wBACzD,GACF,SAECmB,EACC,WAACnB,MAAAwB,EAAA,CAAS,UAAU,SAAU,UAC7BH,EACC,WAAArB,MAAC,UAAO,SAAiB,sBAAS,mDACjC,KAAG,IACJA,MAAC,UAAO,SAAoB,yBAAS,oDACpC,KAAG,IAAE,6EAER,GACF,GACF,GACF,CACF,IACF,CACF,GAEJ,EChYMyB,GAAgB,IAElBlB,EAAA,KAAC,MAAI,WAAU,8BACb,UAACA,OAAA,OAAI,UAAU,mBACb,UAACP,EAAA,UAAG,UAAU,0BAA0B,SAA0B,+BACjEA,EAAA,SAAE,UAAU,wBAAwB,SAErC,gEACF,QAECzC,EAAiB,GACpB","names":["Server","createLucideIcon","SERVERS","MigrationControl","activeServer","setActiveServer","useState","migrationStatus","setMigrationStatus","testResults","setTestResults","isRunningTests","setIsRunningTests","testConnection","serverKey","createClient","__vitePreload","n","server","testClient","data","error","testFunctions","supabase","testRLSPolicies","tests","results","failures","r","testDataIntegrity","clients","clientsError","client","deptCount","printerCount","runMigrationTests","test","result","resolve","failedTests","toast","switchServer","getStatusIcon","status","jsx","CheckCircle","XCircle","Clock","getStatusBadge","variants","Badge","jsxs","Card","CardHeader","CardTitle","Database","CardDescription","Tabs","TabsList","TabsTrigger","TabsContent","key","CardContent","Alert","AlertTriangle","AlertDescription","Button","index","FileText","MigrationPage"],"ignoreList":[0],"sources":["../../node_modules/lucide-react/dist/esm/icons/server.js","../../src/components/MigrationControl.tsx","../../src/pages/MigrationPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Server = createLucideIcon(\"Server\", [\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"2\", rx: \"2\", ry: \"2\", key: \"ngkwjq\" }],\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"14\", rx: \"2\", ry: \"2\", key: \"iecqi9\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"6\", y2: \"6\", key: \"16zg32\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"18\", y2: \"18\", key: \"nzw8ys\" }]\n]);\n\nexport { Server as default };\n//# sourceMappingURL=server.js.map\n","\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\r\nimport { Alert, AlertDescription } from '@/components/ui/alert'\r\nimport { CheckCircle, XCircle, Clock, Database, Server, FileText, AlertTriangle } from 'lucide-react'\r\nimport { supabase } from '@/integrations/supabase/client'\r\nimport { toast } from '@/components/ui/use-toast'\r\n\r\n// Migration server configurations\r\nconst SERVERS = {\r\n  current: {\r\n    name: 'Current Server',\r\n    url: 'https://mzjcmtltwdcpbdvunmzk.supabase.co',\r\n    anon_key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im16amNtdGx0d2RjcGJkdnVubXprIiwicm9sZUiOiJhbm9uIiwiaWF0IjoxNzQ4NjAzNDAwLCJleHAiOjIwNjQxNzk0MDB9.yap8eSNbFjYJsz43kwUZtGh8O3V7V9YPQC5bgx3cFWs',\r\n    status: 'active'\r\n  },\r\n  new: {\r\n    name: 'New Server (kong.techpinoy.com)',\r\n    url: 'https://mzjcmtltwdcpbdvunmzk.supabase.co',\r\n    anon_key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im16amNtdGx0d2RjcGJkdnVubXprIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg2MDM0MDAsImV4cCI6MjA2NDE3OTQwMH0.yap8eSNbFjYJsz43kwUZtGh8O3V7V9YPQC5bgx3cFWs',\r\n    status: 'ready'\r\n  }\r\n}\r\n\r\ninterface TestResult {\r\n  name: string\r\n  status: 'pending' | 'success' | 'error'\r\n  message?: string\r\n  details?: any\r\n}\r\n\r\nexport const MigrationControl = () => {\r\n  const [activeServer, setActiveServer] = useState<'current' | 'new'>('current')\r\n  const [migrationStatus, setMigrationStatus] = useState<'pending' | 'in-progress' | 'completed' | 'failed'>('completed')\r\n  const [testResults, setTestResults] = useState<TestResult[]>([])\r\n  const [isRunningTests, setIsRunningTests] = useState(false)\r\n\r\n  // Test database connection\r\n  const testConnection = async (serverKey: 'current' | 'new'): Promise<TestResult> => {\r\n    try {\r\n      const { createClient } = await import('@supabase/supabase-js')\r\n      const server = SERVERS[serverKey]\r\n      const testClient = createClient(server.url, server.anon_key)\r\n      \r\n      const { data, error } = await testClient.from('clients').select('count', { count: 'exact', head: true })\r\n      \r\n      if (error) throw error\r\n      \r\n      return {\r\n        name: `${server.name} Connection`,\r\n        status: 'success',\r\n        message: `Connected successfully. ${data?.length || 0} clients found.`\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: `${SERVERS[serverKey].name} Connection`,\r\n        status: 'error',\r\n        message: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      }\r\n    }\r\n  }\r\n\r\n  // Test database functions\r\n  const testFunctions = async (): Promise<TestResult> => {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_total_page_views')\r\n      \r\n      if (error) throw error\r\n      \r\n      return {\r\n        name: 'Database Functions',\r\n        status: 'success',\r\n        message: 'Functions are working correctly',\r\n        details: data\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: 'Database Functions',\r\n        status: 'error',\r\n        message: `Function test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      }\r\n    }\r\n  }\r\n\r\n  // Test RLS policies\r\n  const testRLSPolicies = async (): Promise<TestResult> => {\r\n    try {\r\n      // Test basic read access to tables with RLS\r\n      const tests = [\r\n        supabase.from('clients').select('id').limit(1),\r\n        supabase.from('departments').select('id').limit(1),\r\n        supabase.from('printers').select('id').limit(1),\r\n        supabase.from('products').select('id').limit(1)\r\n      ]\r\n      \r\n      const results = await Promise.allSettled(tests)\r\n      const failures = results.filter(r => r.status === 'rejected')\r\n      \r\n      if (failures.length > 0) {\r\n        throw new Error(`RLS policy failures: ${failures.length}/${results.length} tests failed`)\r\n      }\r\n      \r\n      return {\r\n        name: 'RLS Policies',\r\n        status: 'success',\r\n        message: 'All RLS policies are functioning correctly'\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: 'RLS Policies',\r\n        status: 'error',\r\n        message: `RLS test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      }\r\n    }\r\n  }\r\n\r\n  // Test data integrity\r\n  const testDataIntegrity = async (): Promise<TestResult> => {\r\n    try {\r\n      const { data: clients, error: clientsError } = await supabase\r\n        .from('clients')\r\n        .select('id, name, department_count, printer_count')\r\n        .limit(5)\r\n      \r\n      if (clientsError) throw clientsError\r\n      \r\n      // Verify counts are calculated correctly\r\n      for (const client of clients || []) {\r\n        const { count: deptCount } = await supabase\r\n          .from('departments')\r\n          .select('*', { count: 'exact', head: true })\r\n          .eq('client_id', client.id)\r\n        \r\n        const { count: printerCount } = await supabase\r\n          .from('printer_assignments')\r\n          .select('*', { count: 'exact', head: true })\r\n          .eq('client_id', client.id)\r\n          .eq('status', 'active')\r\n        \r\n        if (client.department_count !== deptCount || client.printer_count !== printerCount) {\r\n          throw new Error(`Data integrity issue for client ${client.name}`)\r\n        }\r\n      }\r\n      \r\n      return {\r\n        name: 'Data Integrity',\r\n        status: 'success',\r\n        message: `Verified ${clients?.length || 0} clients - all counts accurate`\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: 'Data Integrity',\r\n        status: 'error',\r\n        message: `Integrity test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      }\r\n    }\r\n  }\r\n\r\n  // Run comprehensive tests\r\n  const runMigrationTests = async () => {\r\n    setIsRunningTests(true)\r\n    setTestResults([])\r\n    \r\n    const tests = [\r\n      () => testConnection('current'),\r\n      () => testConnection('new'),\r\n      testFunctions,\r\n      testRLSPolicies,\r\n      testDataIntegrity\r\n    ]\r\n    \r\n    const results: TestResult[] = []\r\n    \r\n    for (const test of tests) {\r\n      const result = await test()\r\n      results.push(result)\r\n      setTestResults([...results])\r\n      \r\n      // Small delay for better UX\r\n      await new Promise(resolve => setTimeout(resolve, 500))\r\n    }\r\n    \r\n    setIsRunningTests(false)\r\n    \r\n    const failedTests = results.filter(r => r.status === 'error')\r\n    if (failedTests.length === 0) {\r\n      toast({\r\n        title: \"Migration Validation Complete\",\r\n        description: \"All tests passed successfully! Migration is ready.\",\r\n      })\r\n    } else {\r\n      toast({\r\n        title: \"Migration Issues Detected\",\r\n        description: `${failedTests.length} test(s) failed. Please review the results.`,\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  }\r\n\r\n  // Switch active server\r\n  const switchServer = async (serverKey: 'current' | 'new') => {\r\n    try {\r\n      setActiveServer(serverKey)\r\n      toast({\r\n        title: \"Server Switched\",\r\n        description: `Now using ${SERVERS[serverKey].name}`,\r\n      })\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Server Switch Failed\",\r\n        description: error instanceof Error ? error.message : 'Unknown error',\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  }\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'success': return <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n      case 'error': return <XCircle className=\"h-4 w-4 text-red-500\" />\r\n      case 'pending': return <Clock className=\"h-4 w-4 text-yellow-500\" />\r\n      default: return <Clock className=\"h-4 w-4 text-gray-400\" />\r\n    }\r\n  }\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const variants = {\r\n      'active': 'default',\r\n      'ready': 'secondary',\r\n      'error': 'destructive',\r\n      'pending': 'outline'\r\n    } as const\r\n    \r\n    return <Badge variant={variants[status as keyof typeof variants] || 'outline'}>{status}</Badge>\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Database className=\"h-5 w-5\" />\r\n            Database Migration Control Panel\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Manage and validate the migration from old server to new server (kong.techpinoy.com)\r\n          </CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <Tabs defaultValue=\"status\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"status\">Migration Status</TabsTrigger>\r\n          <TabsTrigger value=\"testing\">Validation Tests</TabsTrigger>\r\n          <TabsTrigger value=\"server-control\">Server Control</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"status\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {Object.entries(SERVERS).map(([key, server]) => (\r\n              <Card key={key} className={`${activeServer === key ? 'ring-2 ring-blue-500' : ''}`}>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center justify-between\">\r\n                    <span className=\"flex items-center gap-2\">\r\n                      <Server className=\"h-4 w-4\" />\r\n                      {server.name}\r\n                    </span>\r\n                    {getStatusBadge(server.status)}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-2\">\r\n                    <p className=\"text-sm text-muted-foreground\">URL: {server.url}</p>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Key: {server.anon_key.substring(0, 20)}...\r\n                    </p>\r\n                    {activeServer === key && (\r\n                      <Badge variant=\"outline\">Currently Active</Badge>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n\r\n          <Alert>\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              <strong>Migration Status: {migrationStatus.toUpperCase()}</strong>\r\n              <br />\r\n              Database migration has been successfully executed on the new server. \r\n              All functions, triggers, and RLS policies have been migrated.\r\n            </AlertDescription>\r\n          </Alert>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"testing\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Migration Validation Tests</CardTitle>\r\n              <CardDescription>\r\n                Comprehensive tests to ensure migration integrity and functionality\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <Button \r\n                onClick={runMigrationTests} \r\n                disabled={isRunningTests}\r\n                className=\"w-full\"\r\n              >\r\n                {isRunningTests ? 'Running Tests...' : 'Run Migration Tests'}\r\n              </Button>\r\n              \r\n              {testResults.length > 0 && (\r\n                <div className=\"space-y-2\">\r\n                  <h3 className=\"font-semibold\">Test Results:</h3>\r\n                  {testResults.map((result, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        {getStatusIcon(result.status)}\r\n                        <span className=\"font-medium\">{result.name}</span>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <p className=\"text-sm text-muted-foreground\">{result.message}</p>\r\n                        {result.details && (\r\n                          <p className=\"text-xs text-gray-500\">\r\n                            {JSON.stringify(result.details, null, 2).substring(0, 100)}...\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"server-control\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Server Management</CardTitle>\r\n              <CardDescription>\r\n                Switch between servers and manage the migration process\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <Button \r\n                  variant={activeServer === 'current' ? 'default' : 'outline'}\r\n                  onClick={() => switchServer('current')}\r\n                  className=\"h-20 flex flex-col gap-2\"\r\n                >\r\n                  <Server className=\"h-6 w-6\" />\r\n                  Use Current Server\r\n                  <span className=\"text-xs opacity-70\">Original production server</span>\r\n                </Button>\r\n                \r\n                <Button \r\n                  variant={activeServer === 'new' ? 'default' : 'outline'}\r\n                  onClick={() => switchServer('new')}\r\n                  className=\"h-20 flex flex-col gap-2\"\r\n                >\r\n                  <Database className=\"h-6 w-6\" />\r\n                  Use New Server\r\n                  <span className=\"text-xs opacity-70\">kong.techpinoy.com</span>\r\n                </Button>\r\n              </div>\r\n              \r\n              <Alert>\r\n                <FileText className=\"h-4 w-4\" />\r\n                <AlertDescription>\r\n                  <strong>Phase 3 Complete:</strong> Database migration successfully executed.\r\n                  <br />\r\n                  <strong>Phase 4 In Progress:</strong> Validate migration and test functionality.\r\n                  <br />\r\n                  Use the validation tests above to verify everything is working correctly.\r\n                </AlertDescription>\r\n              </Alert>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  )\r\n}\r\n","\r\nimport React from 'react'\r\nimport { MigrationControl } from '@/components/MigrationControl'\r\n\r\nconst MigrationPage = () => {\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      <div className=\"mb-8 text-center\">\r\n        <h1 className=\"text-3xl font-bold mb-2\">Server Migration Dashboard</h1>\r\n        <p className=\"text-muted-foreground\">\r\n          Manage the transition between old and new Supabase servers\r\n        </p>\r\n      </div>\r\n      \r\n      <MigrationControl />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MigrationPage\r\n"],"file":"assets/MigrationPage-BHrFHQbc.js"}