{"version":3,"file":"usePurchaseOrdersEnhanced-5S0vZqYc.js","sources":["../../src/services/purchaseOrderService.ts","../../src/hooks/usePurchaseOrdersEnhanced.ts"],"sourcesContent":["import { supabase } from '@/integrations/supabase/client';\r\nimport { Database } from '@/integrations/supabase/types';\r\n\r\ntype PurchaseOrder = Database['public']['Tables']['purchase_orders']['Row'];\r\ntype PurchaseOrderItem = Database['public']['Tables']['purchase_order_items']['Row'];\r\n\r\nexport interface PurchaseOrderWithItems extends PurchaseOrder {\r\n  purchase_order_items: PurchaseOrderItem[];\r\n}\r\n\r\nexport interface CreatePurchaseOrderData {\r\n  supplier_name?: string;\r\n  supplier_client_id?: string;\r\n  status?: string;\r\n  payment_status?: string;\r\n  notes?: string;\r\n  client_po?: string;\r\n  items: Array<{\r\n    product_id?: string;\r\n    model?: string;\r\n    quantity: number;\r\n    unit_price: number;\r\n  }>;\r\n}\r\n\r\nexport const purchaseOrderService = {\r\n  async getAllPurchaseOrders(): Promise<PurchaseOrder[]> {\r\n    const { data, error } = await supabase\r\n      .from('purchase_orders')\r\n      .select('*')\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  },\r\n\r\n  async getPurchaseOrderWithItems(id: string): Promise<PurchaseOrderWithItems | null> {\r\n    const { data, error } = await supabase\r\n      .from('purchase_orders')\r\n      .select(`\r\n        *,\r\n        purchase_order_items (*)\r\n      `)\r\n      .eq('id', id)\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async createPurchaseOrder(orderData: CreatePurchaseOrderData): Promise<PurchaseOrder> {\r\n    // Create the purchase order\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('purchase_orders')\r\n      .insert({\r\n        supplier_name: orderData.supplier_name,\r\n        supplier_client_id: orderData.supplier_client_id,\r\n        status: orderData.status || 'pending',\r\n        payment_status: orderData.payment_status || 'unpaid',\r\n        notes: orderData.notes,\r\n        client_po: orderData.client_po,\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (orderError) throw orderError;\r\n\r\n    // Create the purchase order items\r\n    if (orderData.items && orderData.items.length > 0) {\r\n      const items = orderData.items.map(item => ({\r\n        purchase_order_id: order.id,\r\n        product_id: item.product_id,\r\n        model: item.model || '',\r\n        quantity: item.quantity,\r\n        unit_price: item.unit_price,\r\n      }));\r\n\r\n      const { error: itemsError } = await supabase\r\n        .from('purchase_order_items')\r\n        .insert(items);\r\n\r\n      if (itemsError) throw itemsError;\r\n    }\r\n\r\n    return order;\r\n  },\r\n\r\n  async updatePurchaseOrder(id: string, updates: Partial<PurchaseOrder>): Promise<PurchaseOrder> {\r\n    const { data, error } = await supabase\r\n      .from('purchase_orders')\r\n      .update(updates)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data;\r\n  },\r\n\r\n  async deletePurchaseOrder(id: string): Promise<void> {\r\n    const { error } = await supabase\r\n      .from('purchase_orders')\r\n      .delete()\r\n      .eq('id', id);\r\n\r\n    if (error) throw error;\r\n  },\r\n\r\n  async getPurchaseOrderById(id: string): Promise<PurchaseOrderWithItems | null> {\r\n    return this.getPurchaseOrderWithItems(id);\r\n  },\r\n\r\n  async updatePurchaseOrderStatus(id: string): Promise<void> {\r\n    // This function would implement logic to update PO status based on delivery status\r\n    // For now, we'll keep it simple\r\n    const { error } = await supabase\r\n      .from('purchase_orders')\r\n      .update({ status: 'partial' })\r\n      .eq('id', id);\r\n\r\n    if (error) throw error;\r\n  }\r\n};\r\n","\r\nimport { useState, useEffect } from 'react';\r\nimport { purchaseOrderService } from '@/services/purchaseOrderService';\r\nimport { Database } from '@/integrations/supabase/types';\r\nimport { CreatePurchaseOrderData, PurchaseOrderWithDetails } from '@/types/purchaseOrder';\r\nimport { toast } from 'sonner';\r\n\r\ntype PurchaseOrder = Database['public']['Tables']['purchase_orders']['Row'];\r\n\r\nexport const usePurchaseOrdersEnhanced = () => {\r\n  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchPurchaseOrders = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const data = await purchaseOrderService.getAllPurchaseOrders();\r\n      setPurchaseOrders(data as PurchaseOrder[]);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch purchase orders';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createPurchaseOrder = async (poData: CreatePurchaseOrderData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newPO = await purchaseOrderService.createPurchaseOrder(poData);\r\n      setPurchaseOrders(prev => [newPO as PurchaseOrder, ...prev]);\r\n      toast.success('Purchase order created successfully');\r\n      return newPO;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create purchase order';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updatePurchaseOrder = async (id: string, updates: Partial<PurchaseOrder>) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const updatedPO = await purchaseOrderService.updatePurchaseOrder(id, updates);\r\n      setPurchaseOrders(prev => prev.map(po => po.id === id ? updatedPO as PurchaseOrder : po));\r\n      toast.success('Purchase order updated successfully');\r\n      return updatedPO;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update purchase order';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deletePurchaseOrder = async (id: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      await purchaseOrderService.deletePurchaseOrder(id);\r\n      setPurchaseOrders(prev => prev.filter(po => po.id !== id));\r\n      toast.success('Purchase order deleted successfully');\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete purchase order';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPurchaseOrderWithDetails = async (id: string): Promise<PurchaseOrderWithDetails | null> => {\r\n    try {\r\n      const result = await purchaseOrderService.getPurchaseOrderById(id);\r\n      return result as PurchaseOrderWithDetails;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch purchase order details';\r\n      toast.error(errorMessage);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPurchaseOrders();\r\n  }, []);\r\n\r\n  return {\r\n    purchaseOrders,\r\n    loading,\r\n    error,\r\n    createPurchaseOrder,\r\n    updatePurchaseOrder,\r\n    deletePurchaseOrder,\r\n    getPurchaseOrderWithDetails,\r\n    refetch: fetchPurchaseOrders\r\n  };\r\n};\r\n"],"names":["purchaseOrderService","data","error","supabase","id","orderData","order","orderError","items","item","itemsError","updates","usePurchaseOrdersEnhanced","purchaseOrders","setPurchaseOrders","useState","loading","setLoading","setError","fetchPurchaseOrders","err","errorMessage","toast","createPurchaseOrder","poData","newPO","prev","updatePurchaseOrder","updatedPO","po","deletePurchaseOrder","getPurchaseOrderWithDetails","useEffect"],"mappings":"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"}